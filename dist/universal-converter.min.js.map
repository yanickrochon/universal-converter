{"version":3,"sources":["node_modules/browser-pack/_prelude.js","definitions/acceleration.js","definitions/angle.js","definitions/area.js","definitions/binary.js","definitions/density.js","definitions/distance.js","definitions/electric.capacitance.js","definitions/electric.current.js","definitions/energy.js","definitions/flow.rate.mole.js","definitions/flow.rate.volume.js","definitions/force.js","definitions/frequency.js","definitions/illuminance.js","definitions/luminance.js","definitions/mass.js","definitions/power.js","definitions/pressure.js","definitions/temperature.js","definitions/time.js","definitions/torque.js","definitions/velocity.js","definitions/viscosity.dynamic.js","definitions/viscosity.dynamic.oil-water.js","definitions/viscosity.kinematic.js","definitions/volume.js","index.js","node_modules/assert/assert.js","node_modules/process/browser.js","node_modules/util/node_modules/inherits/inherits_browser.js","node_modules/util/support/isBufferBrowser.js","node_modules/util/util.js","src/converter.js","src/units.js","src/util/measure-parser.js"],"names":["f","exports","module","define","amd","window","global","self","this","UniversalConverter","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","name","conversion","params","initialVelocity","velocity","time","converters","velocityOverTime","base","aliases","G","units","centigal","centimeter/square second","decigal","decimeter/square second","dekameter/square second","foot/square second","gal","galileo","gn","grav","g-unit","hectometer/square second","kilometer/hour second","kilometer/square second","inch/square second","meter/square second","mile/square second","mile/hour minute","mile/hour second","milligal","millimeter/square second","radian","mil","Math","PI","grad","degree","minute","second","point","1/16 circle","1/10 circle","1/8 circle","1/6 circle","1/4 circle","1/2 circle","full circle","width","squareArea","rectangleArea","arpent","kattha","perche","tatami","yard","acre","acre [suburbs]","acre [survey]","acre [Ireland]","are","arpent [Canada]","barn","bovate","bunder","caballeria [Spain/Peru]","caballeria [Central America]","caballeria [Cuba]","carreau","carucate","cawney","centiare","cong","cover","cuerda","dekare","dessiatina","dhur","dunum, dunham","fall [Scots]","fall [English]","fanega","farthingdale","hacienda","hectare","hide","homestead","hundred","jerib","jitro, joch, jutro","jo [Japan]","kappland","kattha [Nepal]","labor","legua","manzana [Costa Rican]","manzana [Argentina]","manzana [Nicaragua]","morgen [Germany]","morgen [South Africa]","mu","ngarn","nook","oxgang","perch","perche [Canada]","ping","pyong","rai","rood","section","shed","sitio","square","square angstrom","square astronomical unit","square attometer","square bicron","square centimeter","square chain [Gunter, survey]","square chain [Ramden, Engineer]","square city block [East U.S.]","square city block [Midwest U.S.]","square city block [South, West U.S.]","square cubit","square decimeter","square dekameter","square exameter","square fathom","square femtometer","square fermi","square foot","square foot [survey]","square furlong","square gigameter","square hectometer","square inch","square inch [survey]","square kilometer","square league [nautical]","square league [U.S. statute]","square light year","square link [Gunter, survey]","square link [Ramden, Engineer]","square megameter","square meter","square microinch","square micrometer","square micromicron","square micron","square mil","square mile","square mile [nautical]","square mile [survey, U.S. statute]","square millimeter","square millimicron","square myriameter","square nanometer","square Paris foot","square parsec","square perch","square perche","square petameter","square picometer","square rod","square tenthmeter","square terameter","square thou","square vara [California]","square vara [Texas]","square yard","square yard [survey]","square yoctometer","square yottameter","stang","stremma","tarea","tatami [Japan]","t√∏nde land","township","tsubo","tunnland","virgate","KB","MB","GB","TB","PB","bit","byte","kilobyte","megabyte","gigabyte","terabyte","petabyte","attogram/attoliter","attogram/centiliter","attogram/cubic attometer","attogram/cubic centimeter","attogram/cubic decameter","attogram/cubic decimeter","attogram/cubic dekameter","attogram/cubic exameter","attogram/cubic femtometer","attogram/cubic gigameter","attogram/cubic hectometer","attogram/cubic kilometer","attogram/cubic megameter","attogram/cubic meter","attogram/cubic micrometer","attogram/cubic millimeter","attogram/cubic myriameter","attogram/cubic nanometer","attogram/cubic petameter","attogram/cubic picometer","attogram/cubic terameter","attogram/cubic yoctometer","attogram/cubic yottameter","attogram/cubic zeptometer","attogram/cubic zettameter","attogram/decaliter","attogram/deciliter","attogram/dekaliter","attogram/exaliter","attogram/femtoliter","attogram/gigaliter","attogram/hectoliter","attogram/kiloliter","attogram/liter","attogram/litre","attogram/megaliter","attogram/microliter","attogram/milliliter","attogram/myrialiter","attogram/nanoliter","attogram/petaliter","attogram/picoliter","attogram/teraliter","attogram/yoctoliter","attogram/yottaliter","attogram/zeptoliter","attogram/zettaliter","centigram/attoliter","centigram/centiliter","centigram/cubic attometer","centigram/cubic centimeter","centigram/cubic decameter","centigram/cubic decimeter","centigram/cubic dekameter","centigram/cubic exameter","centigram/cubic femtometer","centigram/cubic gigameter","centigram/cubic hectometer","centigram/cubic kilometer","centigram/cubic megameter","centigram/cubic meter","centigram/cubic micrometer","centigram/cubic millimeter","centigram/cubic myriameter","centigram/cubic nanometer","centigram/cubic petameter","centigram/cubic picometer","centigram/cubic terameter","centigram/cubic yoctometer","centigram/cubic yottameter","centigram/cubic zeptometer","centigram/cubic zettameter","centigram/decaliter","centigram/deciliter","centigram/dekaliter","centigram/exaliter","centigram/femtoliter","centigram/gigaliter","centigram/hectoliter","centigram/kiloliter","centigram/liter","centigram/litre","centigram/megaliter","centigram/microliter","centigram/milliliter","centigram/myrialiter","centigram/nanoliter","centigram/petaliter","centigram/picoliter","centigram/teraliter","centigram/yoctoliter","centigram/yottaliter","centigram/zeptoliter","centigram/zettaliter","decagram/attoliter","decagram/centiliter","decagram/cubic attometer","decagram/cubic centimeter","decagram/cubic decameter","decagram/cubic decimeter","decagram/cubic dekameter","decagram/cubic exameter","decagram/cubic femtometer","decagram/cubic gigameter","decagram/cubic hectometer","decagram/cubic kilometer","decagram/cubic megameter","decagram/cubic meter","decagram/cubic micrometer","decagram/cubic millimeter","decagram/cubic myriameter","decagram/cubic nanometer","decagram/cubic petameter","decagram/cubic picometer","decagram/cubic terameter","decagram/cubic yoctometer","decagram/cubic yottameter","decagram/cubic zeptometer","decagram/cubic zettameter","decagram/decaliter","decagram/deciliter","decagram/dekaliter","decagram/exaliter","decagram/femtoliter","decagram/gigaliter","decagram/hectoliter","decagram/kiloliter","decagram/liter","decagram/litre","decagram/megaliter","decagram/microliter","decagram/milliliter","decagram/myrialiter","decagram/nanoliter","decagram/petaliter","decagram/picoliter","decagram/teraliter","decagram/yoctoliter","decagram/yottaliter","decagram/zeptoliter","decagram/zettaliter","decigram/attoliter","decigram/centiliter","decigram/cubic attometer","decigram/cubic centimeter","decigram/cubic decameter","decigram/cubic decimeter","decigram/cubic dekameter","decigram/cubic exameter","decigram/cubic femtometer","decigram/cubic gigameter","decigram/cubic hectometer","decigram/cubic kilometer","decigram/cubic megameter","decigram/cubic meter","decigram/cubic micrometer","decigram/cubic millimeter","decigram/cubic myriameter","decigram/cubic nanometer","decigram/cubic petameter","decigram/cubic picometer","decigram/cubic terameter","decigram/cubic yoctometer","decigram/cubic yottameter","decigram/cubic zeptometer","decigram/cubic zettameter","decigram/decaliter","decigram/deciliter","decigram/dekaliter","decigram/exaliter","decigram/femtoliter","decigram/gigaliter","decigram/hectoliter","decigram/kiloliter","decigram/liter","decigram/litre","decigram/megaliter","decigram/microliter","decigram/milliliter","decigram/myrialiter","decigram/nanoliter","decigram/petaliter","decigram/picoliter","decigram/teraliter","decigram/yoctoliter","decigram/yottaliter","decigram/zeptoliter","decigram/zettaliter","dekagram/attoliter","dekagram/centiliter","dekagram/cubic attometer","dekagram/cubic centimeter","dekagram/cubic decameter","dekagram/cubic decimeter","dekagram/cubic dekameter","dekagram/cubic exameter","dekagram/cubic femtometer","dekagram/cubic gigameter","dekagram/cubic hectometer","dekagram/cubic kilometer","dekagram/cubic megameter","dekagram/cubic meter","dekagram/cubic micrometer","dekagram/cubic millimeter","dekagram/cubic myriameter","dekagram/cubic nanometer","dekagram/cubic petameter","dekagram/cubic picometer","dekagram/cubic terameter","dekagram/cubic yoctometer","dekagram/cubic yottameter","dekagram/cubic zeptometer","dekagram/cubic zettameter","dekagram/decaliter","dekagram/deciliter","dekagram/dekaliter","dekagram/exaliter","dekagram/femtoliter","dekagram/gigaliter","dekagram/hectoliter","dekagram/kiloliter","dekagram/liter","dekagram/litre","dekagram/megaliter","dekagram/microliter","dekagram/milliliter","dekagram/myrialiter","dekagram/nanoliter","dekagram/petaliter","dekagram/picoliter","dekagram/teraliter","dekagram/yoctoliter","dekagram/yottaliter","dekagram/zeptoliter","dekagram/zettaliter","exagram/attoliter","exagram/centiliter","exagram/cubic attometer","exagram/cubic centimeter","exagram/cubic decameter","exagram/cubic decimeter","exagram/cubic dekameter","exagram/cubic exameter","exagram/cubic femtometer","exagram/cubic gigameter","exagram/cubic hectometer","exagram/cubic kilometer","exagram/cubic megameter","exagram/cubic meter","exagram/cubic micrometer","exagram/cubic millimeter","exagram/cubic myriameter","exagram/cubic nanometer","exagram/cubic petameter","exagram/cubic picometer","exagram/cubic terameter","exagram/cubic yoctometer","exagram/cubic yottameter","exagram/cubic zeptometer","exagram/cubic zettameter","exagram/decaliter","exagram/deciliter","exagram/dekaliter","exagram/exaliter","exagram/femtoliter","exagram/gigaliter","exagram/hectoliter","exagram/kiloliter","exagram/liter","exagram/litre","exagram/megaliter","exagram/microliter","exagram/milliliter","exagram/myrialiter","exagram/nanoliter","exagram/petaliter","exagram/picoliter","exagram/teraliter","exagram/yoctoliter","exagram/yottaliter","exagram/zeptoliter","exagram/zettaliter","femtogram/attoliter","femtogram/centiliter","femtogram/cubic attometer","femtogram/cubic centimeter","femtogram/cubic decameter","femtogram/cubic decimeter","femtogram/cubic dekameter","femtogram/cubic exameter","femtogram/cubic femtometer","femtogram/cubic gigameter","femtogram/cubic hectometer","femtogram/cubic kilometer","femtogram/cubic megameter","femtogram/cubic meter","femtogram/cubic micrometer","femtogram/cubic millimeter","femtogram/cubic myriameter","femtogram/cubic nanometer","femtogram/cubic petameter","femtogram/cubic picometer","femtogram/cubic terameter","femtogram/cubic yoctometer","femtogram/cubic yottameter","femtogram/cubic zeptometer","femtogram/cubic zettameter","femtogram/decaliter","femtogram/deciliter","femtogram/dekaliter","femtogram/exaliter","femtogram/femtoliter","femtogram/gigaliter","femtogram/hectoliter","femtogram/kiloliter","femtogram/liter","femtogram/litre","femtogram/megaliter","femtogram/microliter","femtogram/milliliter","femtogram/myrialiter","femtogram/nanoliter","femtogram/petaliter","femtogram/picoliter","femtogram/teraliter","femtogram/yoctoliter","femtogram/yottaliter","femtogram/zeptoliter","femtogram/zettaliter","gigagram/attoliter","gigagram/centiliter","gigagram/cubic attometer","gigagram/cubic centimeter","gigagram/cubic decameter","gigagram/cubic decimeter","gigagram/cubic dekameter","gigagram/cubic exameter","gigagram/cubic femtometer","gigagram/cubic gigameter","gigagram/cubic hectometer","gigagram/cubic kilometer","gigagram/cubic megameter","gigagram/cubic meter","gigagram/cubic micrometer","gigagram/cubic millimeter","gigagram/cubic myriameter","gigagram/cubic nanometer","gigagram/cubic petameter","gigagram/cubic picometer","gigagram/cubic terameter","gigagram/cubic yoctometer","gigagram/cubic yottameter","gigagram/cubic zeptometer","gigagram/cubic zettameter","gigagram/decaliter","gigagram/deciliter","gigagram/dekaliter","gigagram/exaliter","gigagram/femtoliter","gigagram/gigaliter","gigagram/hectoliter","gigagram/kiloliter","gigagram/liter","gigagram/litre","gigagram/megaliter","gigagram/microliter","gigagram/milliliter","gigagram/myrialiter","gigagram/nanoliter","gigagram/petaliter","gigagram/picoliter","gigagram/teraliter","gigagram/yoctoliter","gigagram/yottaliter","gigagram/zeptoliter","gigagram/zettaliter","gigatonne/attoliter","gigatonne/centiliter","gigatonne/cubic attometer","gigatonne/cubic centimeter","gigatonne/cubic decameter","gigatonne/cubic decimeter","gigatonne/cubic dekameter","gigatonne/cubic exameter","gigatonne/cubic femtometer","gigatonne/cubic gigameter","gigatonne/cubic hectometer","gigatonne/cubic kilometer","gigatonne/cubic megameter","gigatonne/cubic meter","gigatonne/cubic micrometer","gigatonne/cubic millimeter","gigatonne/cubic myriameter","gigatonne/cubic nanometer","gigatonne/cubic petameter","gigatonne/cubic picometer","gigatonne/cubic terameter","gigatonne/cubic yoctometer","gigatonne/cubic yottameter","gigatonne/cubic zeptometer","gigatonne/cubic zettameter","gigatonne/decaliter","gigatonne/deciliter","gigatonne/dekaliter","gigatonne/exaliter","gigatonne/femtoliter","gigatonne/gigaliter","gigatonne/hectoliter","gigatonne/kiloliter","gigatonne/liter","gigatonne/litre","gigatonne/megaliter","gigatonne/microliter","gigatonne/milliliter","gigatonne/myrialiter","gigatonne/nanoliter","gigatonne/petaliter","gigatonne/picoliter","gigatonne/teraliter","gigatonne/yoctoliter","gigatonne/yottaliter","gigatonne/zeptoliter","gigatonne/zettaliter","grain/cubic foot","grain/cubic inch","grain/cubic mile","grain/cubic yard","grain/gallon [UK]","grain/gallon [US dry]","grain/gallon [US]","grain/ounce [UK]","grain/ounce [US]","grain/quart [UK]","grain/quart [US dry]","grain/quart [US]","gram/attoliter","gram/centiliter","gram/cubic attometer","gram/cubic centimeter","gram/cubic decameter","gram/cubic decimeter","gram/cubic dekameter","gram/cubic exameter","gram/cubic femtometer","gram/cubic gigameter","gram/cubic hectometer","gram/cubic kilometer","gram/cubic megameter","gram/cubic meter","gram/cubic micrometer","gram/cubic millimeter","gram/cubic myriameter","gram/cubic nanometer","gram/cubic petameter","gram/cubic picometer","gram/cubic terameter","gram/cubic yoctometer","gram/cubic yottameter","gram/cubic zeptometer","gram/cubic zettameter","gram/decaliter","gram/deciliter","gram/dekaliter","gram/exaliter","gram/femtoliter","gram/gigaliter","gram/hectoliter","gram/kiloliter","gram/liter","gram/litre","gram/megaliter","gram/microliter","gram/milliliter","gram/myrialiter","gram/nanoliter","gram/petaliter","gram/picoliter","gram/teraliter","gram/yoctoliter","gram/yottaliter","gram/zeptoliter","gram/zettaliter","hectogram/attoliter","hectogram/centiliter","hectogram/cubic attometer","hectogram/cubic centimeter","hectogram/cubic decameter","hectogram/cubic decimeter","hectogram/cubic dekameter","hectogram/cubic exameter","hectogram/cubic femtometer","hectogram/cubic gigameter","hectogram/cubic hectometer","hectogram/cubic kilometer","hectogram/cubic megameter","hectogram/cubic meter","hectogram/cubic micrometer","hectogram/cubic millimeter","hectogram/cubic myriameter","hectogram/cubic nanometer","hectogram/cubic petameter","hectogram/cubic picometer","hectogram/cubic terameter","hectogram/cubic yoctometer","hectogram/cubic yottameter","hectogram/cubic zeptometer","hectogram/cubic zettameter","hectogram/decaliter","hectogram/deciliter","hectogram/dekaliter","hectogram/exaliter","hectogram/femtoliter","hectogram/gigaliter","hectogram/hectoliter","hectogram/kiloliter","hectogram/liter","hectogram/litre","hectogram/megaliter","hectogram/microliter","hectogram/milliliter","hectogram/myrialiter","hectogram/nanoliter","hectogram/petaliter","hectogram/picoliter","hectogram/teraliter","hectogram/yoctoliter","hectogram/yottaliter","hectogram/zeptoliter","hectogram/zettaliter","hundredweight/cubic foot [UK]","hundredweight/cubic foot [US]","hundredweight/cubic inch [UK]","hundredweight/cubic inch [US]","hundredweight/cubic mile [UK]","hundredweight/cubic mile [US]","hundredweight/cubic yard [UK]","hundredweight/cubic yard [US]","hundredweight/gallon [UK]","hundredweight/gallon [US dry]","hundredweight/gallon [US]","hundredweight/ounce [UK]","hundredweight/ounce [US]","hundredweight/quart [UK]","hundredweight/quart [US dry]","hundredweight/quart [US]","kilogram/attoliter","kilogram/centiliter","kilogram/cubic attometer","kilogram/cubic centimeter","kilogram/cubic decameter","kilogram/cubic decimeter","kilogram/cubic dekameter","kilogram/cubic exameter","kilogram/cubic femtometer","kilogram/cubic gigameter","kilogram/cubic hectometer","kilogram/cubic kilometer","kilogram/cubic megameter","kilogram/cubic meter","kilogram/cubic micrometer","kilogram/cubic millimeter","kilogram/cubic myriameter","kilogram/cubic nanometer","kilogram/cubic petameter","kilogram/cubic picometer","kilogram/cubic terameter","kilogram/cubic yoctometer","kilogram/cubic yottameter","kilogram/cubic zeptometer","kilogram/cubic zettameter","kilogram/decaliter","kilogram/deciliter","kilogram/dekaliter","kilogram/exaliter","kilogram/femtoliter","kilogram/gigaliter","kilogram/hectoliter","kilogram/kiloliter","kilogram/liter","kilogram/litre","kilogram/megaliter","kilogram/microliter","kilogram/milliliter","kilogram/myrialiter","kilogram/nanoliter","kilogram/petaliter","kilogram/picoliter","kilogram/teraliter","kilogram/yoctoliter","kilogram/yottaliter","kilogram/zeptoliter","kilogram/zettaliter","kiloton/cubic foot [UK]","kiloton/cubic foot [US]","kiloton/cubic inch [UK]","kiloton/cubic inch [US]","kiloton/cubic mile [UK]","kiloton/cubic mile [US]","kiloton/cubic yard [UK]","kiloton/cubic yard [US]","kiloton/gallon [UK]","kiloton/gallon [US dry]","kiloton/gallon [US]","kiloton/ounce [UK]","kiloton/ounce [US]","kiloton/quart [UK]","kiloton/quart [US dry]","kiloton/quart [US]","kilotonne/attoliter","kilotonne/centiliter","kilotonne/cubic attometer","kilotonne/cubic centimeter","kilotonne/cubic decameter","kilotonne/cubic decimeter","kilotonne/cubic dekameter","kilotonne/cubic exameter","kilotonne/cubic femtometer","kilotonne/cubic gigameter","kilotonne/cubic hectometer","kilotonne/cubic kilometer","kilotonne/cubic megameter","kilotonne/cubic meter","kilotonne/cubic micrometer","kilotonne/cubic millimeter","kilotonne/cubic myriameter","kilotonne/cubic nanometer","kilotonne/cubic petameter","kilotonne/cubic picometer","kilotonne/cubic terameter","kilotonne/cubic yoctometer","kilotonne/cubic yottameter","kilotonne/cubic zeptometer","kilotonne/cubic zettameter","kilotonne/decaliter","kilotonne/deciliter","kilotonne/dekaliter","kilotonne/exaliter","kilotonne/femtoliter","kilotonne/gigaliter","kilotonne/hectoliter","kilotonne/kiloliter","kilotonne/liter","kilotonne/litre","kilotonne/megaliter","kilotonne/microliter","kilotonne/milliliter","kilotonne/myrialiter","kilotonne/nanoliter","kilotonne/petaliter","kilotonne/picoliter","kilotonne/teraliter","kilotonne/yoctoliter","kilotonne/yottaliter","kilotonne/zeptoliter","kilotonne/zettaliter","megagram/attoliter","megagram/centiliter","megagram/cubic attometer","megagram/cubic centimeter","megagram/cubic decameter","megagram/cubic decimeter","megagram/cubic dekameter","megagram/cubic exameter","megagram/cubic femtometer","megagram/cubic gigameter","megagram/cubic hectometer","megagram/cubic kilometer","megagram/cubic megameter","megagram/cubic meter","megagram/cubic micrometer","megagram/cubic millimeter","megagram/cubic myriameter","megagram/cubic nanometer","megagram/cubic petameter","megagram/cubic picometer","megagram/cubic terameter","megagram/cubic yoctometer","megagram/cubic yottameter","megagram/cubic zeptometer","megagram/cubic zettameter","megagram/decaliter","megagram/deciliter","megagram/dekaliter","megagram/exaliter","megagram/femtoliter","megagram/gigaliter","megagram/hectoliter","megagram/kiloliter","megagram/liter","megagram/litre","megagram/megaliter","megagram/microliter","megagram/milliliter","megagram/myrialiter","megagram/nanoliter","megagram/petaliter","megagram/picoliter","megagram/teraliter","megagram/yoctoliter","megagram/yottaliter","megagram/zeptoliter","megagram/zettaliter","megatonne/attoliter","megatonne/centiliter","megatonne/cubic attometer","megatonne/cubic centimeter","megatonne/cubic decameter","megatonne/cubic decimeter","megatonne/cubic dekameter","megatonne/cubic exameter","megatonne/cubic femtometer","megatonne/cubic gigameter","megatonne/cubic hectometer","megatonne/cubic kilometer","megatonne/cubic megameter","megatonne/cubic meter","megatonne/cubic micrometer","megatonne/cubic millimeter","megatonne/cubic myriameter","megatonne/cubic nanometer","megatonne/cubic petameter","megatonne/cubic picometer","megatonne/cubic terameter","megatonne/cubic yoctometer","megatonne/cubic yottameter","megatonne/cubic zeptometer","megatonne/cubic zettameter","megatonne/decaliter","megatonne/deciliter","megatonne/dekaliter","megatonne/exaliter","megatonne/femtoliter","megatonne/gigaliter","megatonne/hectoliter","megatonne/kiloliter","megatonne/liter","megatonne/litre","megatonne/megaliter","megatonne/microliter","megatonne/milliliter","megatonne/myrialiter","megatonne/nanoliter","megatonne/petaliter","megatonne/picoliter","megatonne/teraliter","megatonne/yoctoliter","megatonne/yottaliter","megatonne/zeptoliter","megatonne/zettaliter","microgram/attoliter","microgram/centiliter","microgram/cubic attometer","microgram/cubic centimeter","microgram/cubic decameter","microgram/cubic decimeter","microgram/cubic dekameter","microgram/cubic exameter","microgram/cubic femtometer","microgram/cubic gigameter","microgram/cubic hectometer","microgram/cubic kilometer","microgram/cubic megameter","microgram/cubic meter","microgram/cubic micrometer","microgram/cubic millimeter","microgram/cubic myriameter","microgram/cubic nanometer","microgram/cubic petameter","microgram/cubic picometer","microgram/cubic terameter","microgram/cubic yoctometer","microgram/cubic yottameter","microgram/cubic zeptometer","microgram/cubic zettameter","microgram/decaliter","microgram/deciliter","microgram/dekaliter","microgram/exaliter","microgram/femtoliter","microgram/gigaliter","microgram/hectoliter","microgram/kiloliter","microgram/liter","microgram/litre","microgram/megaliter","microgram/microliter","microgram/milliliter","microgram/myrialiter","microgram/nanoliter","microgram/petaliter","microgram/picoliter","microgram/teraliter","microgram/yoctoliter","microgram/yottaliter","microgram/zeptoliter","microgram/zettaliter","milligram/attoliter","milligram/centiliter","milligram/cubic attometer","milligram/cubic centimeter","milligram/cubic decameter","milligram/cubic decimeter","milligram/cubic dekameter","milligram/cubic exameter","milligram/cubic femtometer","milligram/cubic gigameter","milligram/cubic hectometer","milligram/cubic kilometer","milligram/cubic megameter","milligram/cubic meter","milligram/cubic micrometer","milligram/cubic millimeter","milligram/cubic myriameter","milligram/cubic nanometer","milligram/cubic petameter","milligram/cubic picometer","milligram/cubic terameter","milligram/cubic yoctometer","milligram/cubic yottameter","milligram/cubic zeptometer","milligram/cubic zettameter","milligram/decaliter","milligram/deciliter","milligram/dekaliter","milligram/exaliter","milligram/femtoliter","milligram/gigaliter","milligram/hectoliter","milligram/kiloliter","milligram/liter","milligram/litre","milligram/megaliter","milligram/microliter","milligram/milliliter","milligram/myrialiter","milligram/nanoliter","milligram/petaliter","milligram/picoliter","milligram/teraliter","milligram/yoctoliter","milligram/yottaliter","milligram/zeptoliter","milligram/zettaliter","myriagram/attoliter","myriagram/centiliter","myriagram/cubic attometer","myriagram/cubic centimeter","myriagram/cubic decameter","myriagram/cubic decimeter","myriagram/cubic dekameter","myriagram/cubic exameter","myriagram/cubic femtometer","myriagram/cubic gigameter","myriagram/cubic hectometer","myriagram/cubic kilometer","myriagram/cubic megameter","myriagram/cubic meter","myriagram/cubic micrometer","myriagram/cubic millimeter","myriagram/cubic myriameter","myriagram/cubic nanometer","myriagram/cubic petameter","myriagram/cubic picometer","myriagram/cubic terameter","myriagram/cubic yoctometer","myriagram/cubic yottameter","myriagram/cubic zeptometer","myriagram/cubic zettameter","myriagram/decaliter","myriagram/deciliter","myriagram/dekaliter","myriagram/exaliter","myriagram/femtoliter","myriagram/gigaliter","myriagram/hectoliter","myriagram/kiloliter","myriagram/liter","myriagram/litre","myriagram/megaliter","myriagram/microliter","myriagram/milliliter","myriagram/myrialiter","myriagram/nanoliter","myriagram/petaliter","myriagram/picoliter","myriagram/teraliter","myriagram/yoctoliter","myriagram/yottaliter","myriagram/zeptoliter","myriagram/zettaliter","nanogram/attoliter","nanogram/centiliter","nanogram/cubic attometer","nanogram/cubic centimeter","nanogram/cubic decameter","nanogram/cubic decimeter","nanogram/cubic dekameter","nanogram/cubic exameter","nanogram/cubic femtometer","nanogram/cubic gigameter","nanogram/cubic hectometer","nanogram/cubic kilometer","nanogram/cubic megameter","nanogram/cubic meter","nanogram/cubic micrometer","nanogram/cubic millimeter","nanogram/cubic myriameter","nanogram/cubic nanometer","nanogram/cubic petameter","nanogram/cubic picometer","nanogram/cubic terameter","nanogram/cubic yoctometer","nanogram/cubic yottameter","nanogram/cubic zeptometer","nanogram/cubic zettameter","nanogram/decaliter","nanogram/deciliter","nanogram/dekaliter","nanogram/exaliter","nanogram/femtoliter","nanogram/gigaliter","nanogram/hectoliter","nanogram/kiloliter","nanogram/liter","nanogram/litre","nanogram/megaliter","nanogram/microliter","nanogram/milliliter","nanogram/myrialiter","nanogram/nanoliter","nanogram/petaliter","nanogram/picoliter","nanogram/teraliter","nanogram/yoctoliter","nanogram/yottaliter","nanogram/zeptoliter","nanogram/zettaliter","ounce/cubic foot","ounce/cubic inch","ounce/cubic mile","ounce/cubic yard","ounce/gallon [UK]","ounce/gallon [US dry]","ounce/gallon [US]","ounce/ounce [UK]","ounce/ounce [US]","ounce/quart [UK]","ounce/quart [US dry]","ounce/quart [US]","petagram/attoliter","petagram/centiliter","petagram/cubic attometer","petagram/cubic centimeter","petagram/cubic decameter","petagram/cubic decimeter","petagram/cubic dekameter","petagram/cubic exameter","petagram/cubic femtometer","petagram/cubic gigameter","petagram/cubic hectometer","petagram/cubic kilometer","petagram/cubic megameter","petagram/cubic meter","petagram/cubic micrometer","petagram/cubic millimeter","petagram/cubic myriameter","petagram/cubic nanometer","petagram/cubic petameter","petagram/cubic picometer","petagram/cubic terameter","petagram/cubic yoctometer","petagram/cubic yottameter","petagram/cubic zeptometer","petagram/cubic zettameter","petagram/decaliter","petagram/deciliter","petagram/dekaliter","petagram/exaliter","petagram/femtoliter","petagram/gigaliter","petagram/hectoliter","petagram/kiloliter","petagram/liter","petagram/litre","petagram/megaliter","petagram/microliter","petagram/milliliter","petagram/myrialiter","petagram/nanoliter","petagram/petaliter","petagram/picoliter","petagram/teraliter","petagram/yoctoliter","petagram/yottaliter","petagram/zeptoliter","petagram/zettaliter","picogram/attoliter","picogram/centiliter","picogram/cubic attometer","picogram/cubic centimeter","picogram/cubic decameter","picogram/cubic decimeter","picogram/cubic dekameter","picogram/cubic exameter","picogram/cubic femtometer","picogram/cubic gigameter","picogram/cubic hectometer","picogram/cubic kilometer","picogram/cubic megameter","picogram/cubic meter","picogram/cubic micrometer","picogram/cubic millimeter","picogram/cubic myriameter","picogram/cubic nanometer","picogram/cubic petameter","picogram/cubic picometer","picogram/cubic terameter","picogram/cubic yoctometer","picogram/cubic yottameter","picogram/cubic zeptometer","picogram/cubic zettameter","picogram/decaliter","picogram/deciliter","picogram/dekaliter","picogram/exaliter","picogram/femtoliter","picogram/gigaliter","picogram/hectoliter","picogram/kiloliter","picogram/liter","picogram/litre","picogram/megaliter","picogram/microliter","picogram/milliliter","picogram/myrialiter","picogram/nanoliter","picogram/petaliter","picogram/picoliter","picogram/teraliter","picogram/yoctoliter","picogram/yottaliter","picogram/zeptoliter","picogram/zettaliter","pound/cubic foot","pound/cubic inch","pound/cubic mile","pound/cubic yard","pound/gallon [UK]","pound/gallon [US dry]","pound/gallon [US]","pound/ounce [UK]","pound/ounce [US]","pound/quart [UK]","pound/quart [US dry]","pound/quart [US]","teragram/attoliter","teragram/centiliter","teragram/cubic attometer","teragram/cubic centimeter","teragram/cubic decameter","teragram/cubic decimeter","teragram/cubic dekameter","teragram/cubic exameter","teragram/cubic femtometer","teragram/cubic gigameter","teragram/cubic hectometer","teragram/cubic kilometer","teragram/cubic megameter","teragram/cubic meter","teragram/cubic micrometer","teragram/cubic millimeter","teragram/cubic myriameter","teragram/cubic nanometer","teragram/cubic petameter","teragram/cubic picometer","teragram/cubic terameter","teragram/cubic yoctometer","teragram/cubic yottameter","teragram/cubic zeptometer","teragram/cubic zettameter","teragram/decaliter","teragram/deciliter","teragram/dekaliter","teragram/exaliter","teragram/femtoliter","teragram/gigaliter","teragram/hectoliter","teragram/kiloliter","teragram/liter","teragram/litre","teragram/megaliter","teragram/microliter","teragram/milliliter","teragram/myrialiter","teragram/nanoliter","teragram/petaliter","teragram/picoliter","teragram/teraliter","teragram/yoctoliter","teragram/yottaliter","teragram/zeptoliter","teragram/zettaliter","tonne/attoliter","tonne/centiliter","tonne/cubic attometer","tonne/cubic centimeter","tonne/cubic decameter","tonne/cubic decimeter","tonne/cubic dekameter","tonne/cubic exameter","tonne/cubic femtometer","tonne/cubic gigameter","tonne/cubic hectometer","tonne/cubic kilometer","tonne/cubic megameter","tonne/cubic meter","tonne/cubic micrometer","tonne/cubic millimeter","tonne/cubic myriameter","tonne/cubic nanometer","tonne/cubic petameter","tonne/cubic picometer","tonne/cubic terameter","tonne/cubic yoctometer","tonne/cubic yottameter","tonne/cubic zeptometer","tonne/cubic zettameter","tonne/decaliter","tonne/deciliter","tonne/dekaliter","tonne/exaliter","tonne/femtoliter","tonne/gigaliter","tonne/hectoliter","tonne/kiloliter","tonne/liter","tonne/litre","tonne/megaliter","tonne/microliter","tonne/milliliter","tonne/myrialiter","tonne/nanoliter","tonne/petaliter","tonne/picoliter","tonne/teraliter","tonne/yoctoliter","tonne/yottaliter","tonne/zeptoliter","tonne/zettaliter","yoctogram/attoliter","yoctogram/centiliter","yoctogram/cubic attometer","yoctogram/cubic centimeter","yoctogram/cubic decameter","yoctogram/cubic decimeter","yoctogram/cubic dekameter","yoctogram/cubic exameter","yoctogram/cubic femtometer","yoctogram/cubic gigameter","yoctogram/cubic hectometer","yoctogram/cubic kilometer","yoctogram/cubic megameter","yoctogram/cubic meter","yoctogram/cubic micrometer","yoctogram/cubic millimeter","yoctogram/cubic myriameter","yoctogram/cubic nanometer","yoctogram/cubic petameter","yoctogram/cubic picometer","yoctogram/cubic terameter","yoctogram/cubic yoctometer","yoctogram/cubic yottameter","yoctogram/cubic zeptometer","yoctogram/cubic zettameter","yoctogram/decaliter","yoctogram/deciliter","yoctogram/dekaliter","yoctogram/exaliter","yoctogram/femtoliter","yoctogram/gigaliter","yoctogram/hectoliter","yoctogram/kiloliter","yoctogram/liter","yoctogram/litre","yoctogram/megaliter","yoctogram/microliter","yoctogram/milliliter","yoctogram/myrialiter","yoctogram/nanoliter","yoctogram/petaliter","yoctogram/picoliter","yoctogram/teraliter","yoctogram/yoctoliter","yoctogram/yottaliter","yoctogram/zeptoliter","yoctogram/zettaliter","yottagram/attoliter","yottagram/centiliter","yottagram/cubic attometer","yottagram/cubic centimeter","yottagram/cubic decameter","yottagram/cubic decimeter","yottagram/cubic dekameter","yottagram/cubic exameter","yottagram/cubic femtometer","yottagram/cubic gigameter","yottagram/cubic hectometer","yottagram/cubic kilometer","yottagram/cubic megameter","yottagram/cubic meter","yottagram/cubic micrometer","yottagram/cubic millimeter","yottagram/cubic myriameter","yottagram/cubic nanometer","yottagram/cubic petameter","yottagram/cubic picometer","yottagram/cubic terameter","yottagram/cubic yoctometer","yottagram/cubic yottameter","yottagram/cubic zeptometer","yottagram/cubic zettameter","yottagram/decaliter","yottagram/deciliter","yottagram/dekaliter","yottagram/exaliter","yottagram/femtoliter","yottagram/gigaliter","yottagram/hectoliter","yottagram/kiloliter","yottagram/liter","yottagram/litre","yottagram/megaliter","yottagram/microliter","yottagram/milliliter","yottagram/myrialiter","yottagram/nanoliter","yottagram/petaliter","yottagram/picoliter","yottagram/teraliter","yottagram/yoctoliter","yottagram/yottaliter","yottagram/zeptoliter","yottagram/zettaliter","zeptogram/attoliter","zeptogram/centiliter","zeptogram/cubic attometer","zeptogram/cubic centimeter","zeptogram/cubic decameter","zeptogram/cubic decimeter","zeptogram/cubic dekameter","zeptogram/cubic exameter","zeptogram/cubic femtometer","zeptogram/cubic gigameter","zeptogram/cubic hectometer","zeptogram/cubic kilometer","zeptogram/cubic megameter","zeptogram/cubic meter","zeptogram/cubic micrometer","zeptogram/cubic millimeter","zeptogram/cubic myriameter","zeptogram/cubic nanometer","zeptogram/cubic petameter","zeptogram/cubic picometer","zeptogram/cubic terameter","zeptogram/cubic yoctometer","zeptogram/cubic yottameter","zeptogram/cubic zeptometer","zeptogram/cubic zettameter","zeptogram/decaliter","zeptogram/deciliter","zeptogram/dekaliter","zeptogram/exaliter","zeptogram/femtoliter","zeptogram/gigaliter","zeptogram/hectoliter","zeptogram/kiloliter","zeptogram/liter","zeptogram/litre","zeptogram/megaliter","zeptogram/microliter","zeptogram/milliliter","zeptogram/myrialiter","zeptogram/nanoliter","zeptogram/petaliter","zeptogram/picoliter","zeptogram/teraliter","zeptogram/yoctoliter","zeptogram/yottaliter","zeptogram/zeptoliter","zeptogram/zettaliter","zettagram/attoliter","zettagram/centiliter","zettagram/cubic attometer","zettagram/cubic centimeter","zettagram/cubic decameter","zettagram/cubic decimeter","zettagram/cubic dekameter","zettagram/cubic exameter","zettagram/cubic femtometer","zettagram/cubic gigameter","zettagram/cubic hectometer","zettagram/cubic kilometer","zettagram/cubic megameter","zettagram/cubic meter","zettagram/cubic micrometer","zettagram/cubic millimeter","zettagram/cubic myriameter","zettagram/cubic nanometer","zettagram/cubic petameter","zettagram/cubic picometer","zettagram/cubic terameter","zettagram/cubic yoctometer","zettagram/cubic yottameter","zettagram/cubic zeptometer","zettagram/cubic zettameter","zettagram/decaliter","zettagram/deciliter","zettagram/dekaliter","zettagram/exaliter","zettagram/femtoliter","zettagram/gigaliter","zettagram/hectoliter","zettagram/kiloliter","zettagram/liter","zettagram/litre","zettagram/megaliter","zettagram/microliter","zettagram/milliliter","zettagram/myrialiter","zettagram/nanoliter","zettagram/petaliter","zettagram/picoliter","zettagram/teraliter","zettagram/yoctoliter","zettagram/yottaliter","zettagram/zeptoliter","zettagram/zettaliter","surface","squareWidth","sqrt","rectangleWidth","velocityAndTime","in","ft","yd","m","km","inch","foot","feet","mile","agate [Adobe]","alen [Danish]","alen [Scandinavia]","alen [Swedish]","angstrom","arms-length","arpent [France]","arsheen [Russia]","arshin [iran]","arshin [iraq]","astronomical unit","attometer","bamboo","barleycorn","bee space","bicron","block [East U.S.]","block [Midwest U.S.]","block [South, West U.S.]","bohr","braccio [Italy]","braza [Argentina]","braza [Spain]","braza [Texas]","button measure","cable [U.S.]","cable [British]","caliber","cana (canna, canne)","cape foot","cape inch","cape rood","centimeter","chain [Gunter, survey]","chain [Ramsden, engineer]","ch'ih [China]","chinese foot","chinese inch","chinese mile","chinese yard","city block [East U.S.]","city block [Midwest U.S.]","city block [South, West U.S.]","click [U.S. military]","cuadra","cuadra [Argentina]","cubit [Egyptian]","cubit [Royal Egyptian]","cubit [English]","cubit [Roman]","decimeter","dekameter","didot point","digit","diraa [Egypt]","dong [Vietnam]","douzi√®me [watchmaking]","douzi√®me [print]","dra [Iraq]","dra [Russia]","el [Dutch]","ell [English]","ell [Scotland]","elle [Germany]","elle [Vienna]","em","estadio [Portugal]","estadio [Spain]","exameter","faden [Austria]","faden [Switzerland]","fall [Scotland]","fathom","fathom [ancient]","faust [Hungary]","feet [pre-1963 Canada]","feet [Egypt]","feet [France]","feet [international, U.S.]","feet [iraq]","feet [Netherlands]","feet [Rome]","feet [survey]","femtometer","fermi","finger","fingerbreadth","fist","fod","foot [Egypt]","foot [France]","foot [international, U.S.]","foot [iraq]","foot [Netherlands]","foot [Rome]","foot [survey]","football field [Canada]","football field [U.S.]","football field [U.S., complete]","furlong [international]","furlong [survey]","fuss [German]","gigameter","gigaparsec","gnat's eye","goad","gry","hair's breadth","hand [non-equine]","handbreadth","hat [Cambodia]","hectometer","heer","hiro [Japan]","hubble","hvat [Croatia]","inch [international, U.S.]","iron","ken [Japan]","kerat","kilofoot","kilometer","kiloparsec","kiloyard","kind","klafter [Austria]","klafter [Switzerland]","klick","kyu","lap [old]","lap [competition]","lap [olympic pool]","league [ancient Celtic]","league [nautical]","league [UK nautical]","league [UK]","league [US statute]","leap","legoa","legua [Texas]","legua [Spanish, pre-1568]","legua [Spanish, post-1568]","li [ancient China]","li [imperial China]","li [modern China]","lieue [France]","lieue [France, metric]","lieue [France, nautical]","light second","light minute","light hour","light day","light year [Julian]","light year [tropical]","light year [traditional]","ligne [France]","ligne [Swiss]","line","line [small]","link [Gunter, survey]","link [Ramden, engineer]","lug","lug [great]","marathon","mark twain","megameter","megaparsec","meile [Austria]","meile [geographische]","meile [North Germany]","meter","metre","metric mile","metric mile [high school]","microinch","micrometer","micromicron","micron","miglio","miil (mijl) [Danish]","miil (mijl) [Denmark]","miil (mijl) [Sweden, ancient]","mil [Sweden]","mile [Britain, ancient]","mile [Irish]","mile [international]","mile [nautical, international]","mile [nautical, UK]","mile [nautical, US]","mile [Roman, ancient]","mile [Scottish]","mile [statute]","mile [survey, US]","milha [Portuguese]","military pace","military pace [double time]","milla [Spanish]","mille [French]","milliare [Rome]","millimeter","millimicron","mkono [Africa]","moot [India]","myriameter","nail","nanometer","nanon","pace [great]","pace [Roman]","palm [Dutch]","palm [Britain, Roman minor]","palm [US, Roman major]","palmo [Portuguese]","palmo [Spanish]","palmo [Texas]","parasang","Paris foot","parsec","pe [Portuguese]","pearl","perch [Ireland]","pertica","pes","petameter","pica","picometer","pie [Argentina]","pie [Italian]","pie [Spanish]","pie [Texas]","pied de roi","pik","pike [Greece]","point [Adobe]","point [Britain, US]","point [Didot]","point [TeX]","pole","polegada [Portuguese]","pouce","pu [China]","pulgada","pygme [Greece]","Q","quadrant","quarter","quarter [cloth]","quarter [print]","range","reed [Israel]","ri [Japan]","ridge","river [Egypt]","Robie","rod [international]","rod [survey]","roede","rope","royal foot","rute [Germany]","sadzhen","sagene","Scots foot","Scots mile","seemeile","shackle","shaftment","shaftment [ancient]","shaku [Japan]","siriometer","smoot","span","spat","stadium","step","stick","story","stride [great]","stride [Roman]","tenthmeter","terameter","thou","toise","t'sun","tu","twain","twip","U","vara [California]","vara [Mexico]","vara [Portuguese]","vara [South America]","vara [Spanish]","vara [Texas]","verge","vershok","verst","wah [Thailand]","werst","X unit","yoctometer","yottameter","zeptometer","zettameter","zoll [Germany]","zoll [Switzerland]","farad","abfarad","centifarad","coulomb/volt","decifarad","dekafarad","electromagnetic unit","electrostatic unit","farad [SI standard]","gaussian","gigafarad","hectofarad","jar","kilofarad","megafarad","microfarad","millifarad","nanofarad","picofarad","puff","second/ohm","statfarad","terafarad","farad [international]","abampere","ampere","amp","biot","centiampere","coulomb/second","deciampere","dekaampere","electromagnetic unit of current","electrostatic unit of current","franklin/second","gaussian electric current","gigaampere","gilbert","hectoampere","kiloampere","megaampere","microampere","milliampere","milliamp","nanoampere","picoampere","siemens volt","statampere","teraampere","volt/ohm","watt/volt","weber/henry","attojoule","Board of Trade unit","Btu","Btu [thermochemical]","calorie [I.T.]","calorie [15¬∞ C]","Calorie [nutritional]","calorie [thermochemical]","celsius heat unit","centijoule","cheval vapeur heure","decijoule","dekajoule","dekawatt hour","dekatherm","electronvolt","erg","exajoule","exawatt hour","femtojoule","foot pound","foot poundal","gallon [UK] of automotive gasoline","gallon [U.S.] of automotive gasoline","gallon [UK] of aviation gasoline","gallon [U.S.] of aviation gasoline","gallon [UK] of diesel oil","gallon [U.S.] of diesel oil","gallon [UK] of distilate #2 fuel oil","gallon [U.S.] of distilate #2 fuel oil","gallon [UK] of kerosene type jet fuel","gallon [U.S.] of kerosene type jet fuel","gallon [UK] of LPG","gallon [U.S.] of LPG","gallon [UK] of naphtha type jet fuel","gallon [U.S.] of naphtha type jet fuel","gallon [UK] of kerosene","gallon [U.S.] of kerosene","gallon [UK] of residual fuel oil","gallon [U.S.] of residual fuel oil","gigaelectronvolt","gigacalorie [I.T.]","gigacalorie [15¬∞ C]","gigajoule","gigawatt hour","gram calorie","hartree","hectojoule","hectowatt hour","horsepower hour","hundred cubic foot of natural gas","inch ounce","inch pound","joule","kilocalorie [15¬∞ C]","kilocalorie [I.T.]","kilocalorie [thermochemical]","kiloelectronvolt","kilogram calorie","kilogram-force meter","kilojoule","kilopond meter","kiloton [explosive]","kilowatt hour","liter atmosphere","megaelectronvolt","megacalorie [I.T.]","megacalorie [15¬∞ C]","megajoule","megalerg","megaton [explosive]","megawatthour","meter kilogram-force","microjoule","millijoule","myriawatt hour","nanojoule","newton meter","petajoule","petawatthour","pferdest√§rkenstunde","picojoule","Q unit","quad","teraelectronvolt","terajoule","terawatthour","therm [Europe]","therm [U.S. (uncommon)]","thermie","ton [explosive]","tonne of coal equivalent","tonne of oil equivalent","watthour","wattsecond","yoctojoule","yottajoule","yottawatthour","zeptojoule","zettajoule","zettawatthour","centimole/day","centimole/hour","centimole/minute","centimole/second","megamole/day","megamole/hour","megamole/minute","megamole/second","micromole/day","micromole/hour","micromole/minute","micromole/second","millimole/day","millimole/hour","millimole/minute","millimole/second","mole/day","mole/hour","mole/minute","mole/second","acre foot/day","acre foot/hour","acre foot/minute","acre foot/second","acre foot/day [survey]","acre foot/hour [survey]","acre foot/minute [survey]","acre foot/second [survey]","acre inch/day","acre inch/hour","acre inch/minute","acre inch/second","acre inch/day [survey]","acre inch/hour [survey]","acre inch/minute [survey]","acre inch/second [survey]","barrel/day [petroleum]","barrel/hour [petroleum]","barrel/minute [petroleum]","barrel/second [petroleum]","barrel/day [UK]","barrel/hour [UK]","barrel/minute [UK]","barrel/second [UK]","barrel/day [US]","barrel/hour [US]","barrel/minute [US]","barrel/second [US]","barrel/day [US beer/wine]","barrel/hour [US beer/wine]","barrel/minute [US beer/wine]","barrel/second [US beer/wine]","billion cubic foot/day","billion cubic foot/hour","billion cubic foot/minute","billion cubic foot/second","centiliter/day","centiliter/hour","centiliter/minute","centiliter/second","cubem/day","cubem/hour","cubem/minute","cubem/second","cubic centimeter/day","cubic centimeter/hour","cubic centimeter/minute","cubic centimeter/second","cubic decimeter/day","cubic decimeter/hour","cubic decimeter/minute","cubic decimeter/second","cubic dekameter/day","cubic dekameter/hour","cubic dekameter/minute","cubic dekameter/second","cubic foot/day","cubic foot/hour","cubic foot/minute","cubic foot/second","cubic inch/day","cubic inch/hour","cubic inch/minute","cubic inch/second","cubic kilometer/day","cubic kilometer/hour","cubic kilometer/minute","cubic kilometer/second","cubic meter/day","cubic meter/hour","cubic meter/minute","cubic meter/second","cubic mile/day","cubic mile/hour","cubic mile/minute","cubic mile/second","cubic millimeter/day","cubic millimeter/hour","cubic millimeter/minute","cubic millimeter/second","cubic yard/day","cubic yard/hour","cubic yard/minute","cubic yard/second","cusec","deciliter/day","deciliter/hour","deciliter/minute","deciliter/second","dekaliter/day","dekaliter/hour","dekaliter/minute","dekaliter/second","gallon/day [UK]","gallon/hour [UK]","gallon/minute [UK]","gallon/second [UK]","gallon/day [US]","gallon/hour [US]","gallon/minute [US]","gallon/second [US]","hectare meter/day","hectare meter/hour","hectare meter/minute","hectare meter/second","hectoliter/day","hectoliter/hour","hectoliter/minute","hectoliter/second","kiloliter/day","kiloliter/hour","kiloliter/minute","kiloliter/second","lambda/day","lambda/hour","lambda/minute","lambda/second","liter/day","liter/hour","liter/minute","liter/second","milliliter/day","milliliter/hour","milliliter/minute","milliliter/second","million acre foot/day","million acre foot/hour","million acre foot/minute","million acre foot/second","million cubic foot/day","million cubic foot/hour","million cubic foot/minute","million cubic foot/second","million gallon/day [UK]","million gallon/hour [UK]","million gallon/minute [UK]","million gallon/second [UK]","million gallon/day [US]","million gallon/hour [US]","million gallon/minute [US]","million gallon/second [US]","miner's inch [AZ, CA, OR] ","miner's inch [CO]","miner's inch [ID, WA, NM]","ounce/day [UK]","ounce/hour [UK]","ounce/minute [UK]","ounce/second [UK]","ounce/day [US]","ounce/hour [US]","ounce/minute [US]","ounce/second [US]","petrograd standard/day","petrograd standard/hour","petrograd standard/minute","petrograd standard/second","stere/day","stere/hour","stere/minute","stere/second","thousand cubic foot/day","thousand cubic foot/hour","thousand cubic foot/minute","thousand cubic foot/second","trillion cubic foot/day","trillion cubic foot/hour","trillion cubic foot/minute","trillion cubic foot/second","attonewton","centinewton","decigram-force","decinewton","dekagram-force","dekanewton","dyne","exanewton","femtonewton","giganewton","gram-force","hectonewton","joule/meter","kilogram-force","kilonewton","kilopond","kip","meganewton","megapond","micronewton","millinewton","nanonewton","newton","ounce-force","petanewton","piconewton","pond","pound-force","poundal","sthene","teranewton","ton-force [long]","ton-force [metric]","ton-force [short]","yoctonewton","yottanewton","zeptonewton","zettanewton","hz","khz","Mhz","Ghz","THz","RPM","1/second","cycle/second","degree/hour","degree/minute","degree/second","gigahertz","hertz","kilohertz","megahertz","millihertz","radian/hour","radian/minute","radian/second","revolution/hour","revolution/minute","revolution/second","terrahertz","footcandle","kilolux","lumen/square centimeter","lumen/square foot","lumen/square inch","lumen/square meter","lux","metercandle","milliphot","nox","phot","apostilb","blondel","candela/square centimeter","candela/square foot","candela/square inch","candela/square meter","Footlambert","kilocandela/square centimeter","kilocandela/square foot","kilocandela/square inch","kilocandela/square meter","lambert","millilambert","nit","stilb","as","ass","atomic mass unit","carat","carga","chalder","chaldron","lb","lbs","ton","arratel, artel [Arab]","arroba [Portugal]","arroba [Spain]","as, ass [Northern Europe]","atomic mass unit [1960]","atomic mass unit [1973]","atomic mass unit [1986]","atomic mass unit [1998]","avogram","bag [portland cement]","baht [Thailand]","bale [UK]","bale [US]","bismar pound [Denmark]","candy [India]","carat [international]","carat [metric]","carat [UK]","carat [pre-1913 US]","carga [Mexico]","catti [China]","catti [Japan]","catty [China]","catty [Japan, Thailand]","cental","centigram","centner [Germany]","centner [Russia]","chalder, chaldron","chin [China]","chin [Japan]","clove","crith","dalton","dan [China]","dan [Japan]","decigram","decitonne","dekagram","dekatonne","denaro [Italy]","denier [France]","drachme","dram","dram [apothecaries]","electron","etto [Italy]","exagram","femtogram","firkin [butter, soap]","flask","fother [lead]","fotmal [lead]","funt, funte [Russia]","gamma","gigagram","gigatonne","gin [China]","gin [Japan]","grain","gram","gran [Germany]","grano, grani [Italy]","gros","hectogram","hundredweight [long, UK]","hundredweight [short, US]","hyl","jin [China]","jupiter","kati [China]","kati [Japan]","keel [coal]","keg [nails]","kilodalton","kilogram","kiloton [long, UK]","kiloton [short, US]","kilotonne","kin [Japan]","koyan [Malaysia]","kwan [Japan]","last [Germany]","last [US]","last [US, wool]","liang [China]","libra [Italy]","libra [Portugal, Spain]","libra [ancient Rome]","libra [metric]","livre [France]","long ton","lot [Germany]","mace [China]","mahnd [Arab]","marc [France]","marco [Spanish]","mark [English]","mark [German]","maund [India]","maund [Pakistan]","megadalton","megagram","megatonne","mercantile pound","metric ton","mic","microgram","millidalton","millier","milligram","millimass unit","mina [Hebrew]","momme [Japan]","myriagram","nanogram","Newton","obol, obolos, obolus [Greece]","obolos [Ancient Greece]","obolus [Ancient Rome]","okka [Turkey]","on√ßa [Portuguese]","once [France]","oncia [Italy]","onza [Spanish]","ons [Dutch]","ounce","ounce [troy]","packen [Russia]","pennyweight [troy]","petagram","pfund [Denmark, Germany]","picogram","pond [Dutch]","pound","pound [metric]","pound [troy]","pud, pood [Russia]","pund [Scandinavia]","qian [China]","qintar [Arab]","quarter [UK]","quarter [US]","quarter (ton) [US]","quartern","quartern-loaf","quintal [French]","quintal [metric]","quintal [Portugal]","quintal [Spanish]","rebah","rotl, rotel, rottle, ratel [Arab]","sack [UK, wool]","scruple [troy]","seer [India]","seer [Pakistan]","shekel [Hebrew]","short ton","slinch","slug","stone","tael, tahil [Japan]","tahil [China]","talent [Hebrew]","tan [China]","technische mass einheit (TME)","teragram","tetradrachm [Hebrew]","tical [Asia]","tod","tola [India]","tola [Pakistan]","ton [long, UK]","ton [metric]","ton [short, US]","tonelada [Portugal]","tonelada [Spain]","tonne","tonneau [France]","tovar [Bulgaria]","troy ounce","troy pound","truss","uncia [Rome]","unze [Germany]","vagon [Yugoslavia]","yoctogram","yottagram","zentner [Germany]","zeptogram","zettagram","horsepower","hp","attowatt","Btu/hour [I.T.]","Btu/minute [I.T.]","Btu/second [I.T.]","calorie/hour [I.T.]","calorie/minute [I.T.]","calorie/second [I.T.]","centiwatt","cheval vapeur","clusec","deciwatt","dekawatt","dyne centimeter/hour","dyne centimeter/minute","dyne centimeter/second","erg/hour","erg/minute","erg/second","exawatt","femtowatt","foot pound-force/hour","foot pound-force/minute","foot pound-force/second","foot poundal/hour","foot poundal/minute","foot poundal/second","gigawatt","gram-force centimeter/hour","gram-force centimeter/minute","gram-force centimeter/second","hectowatt","horsepower [international]","horsepower [electric]","horsepower [metric]","horsepower [water]","inch ounce-force revolution/minute","joule/hour","joule/minute","joule/second","kilocalorie/hour [I.T.]","kilocalorie/minute [I.T.]","kilocalorie/second [I.T.]","kilogram-force meter/hour","kilogram-force meter/minute","kilogram-force meter/second","kilopond meter/hour","kilopond meter/minute","kilopond meter/second","kilowatt","megawatt","microwatt","million Btu/hour [I.T.]","milliwatt","nanowatt","newton meter/hour","newton meter/minute","newton meter/second","petawatt","pferdestarke","picowatt","poncelet","pound square foot/cubic second","terawatt","ton of refrigeration","watt","yoctowatt","yottawatt","zeptowatt","zettawatt","PSI","atmosphere [standard]","atmosphere [technical]","attobar","attopascal","bar","barad","barye","centibar","centihg","centimeter of mercury [0 ¬∞C]","centimeter of water [4 ¬∞C]","centipascal","centitorr","decibar","decipascal","decitorr","dekabar","dekapascal","dyne/square centimeter","exabar","exapascal","femtobar","femtopascal","foot of air [0 ¬∞C]","foot of air [15 ¬∞C]","foot of head","foot of mercury [0 ¬∞C]","foot of water [4 ¬∞C]","gigabar","gigapascal","gram-force/square centimeter","hectobar","hectopascal","inch of air [0 ¬∞C]","inch of air [15 ¬∞C]","inch of mercury [0 ¬∞C]","inch of water [4 ¬∞C]","kilobar","kilogram-force/square centimeter","kilogram-force/square meter","kilogram-force/square millimeter","kilonewton/square meter","kilopascal","kilopond/square centimeter","kilopond/square meter","kilopond/square millimeter","kip/square foot","kip/square inch","megabar","meganewton/square meter","megapascal","meter of air [0 ¬∞C]","meter of air [15 ¬∞C]","meter of head","microbar","micrometer of mercury [0 ¬∞C]","micrometer of water [4 ¬∞C]","micron of mercury [0 ¬∞C]","micropascal","millibar","millihg","millimeter of mercury [0 ¬∞C]","millimeter of water [4 ¬∞C]","millipascal","millitorr","nanobar","nanopascal","newton/square meter","newton/square millimeter","ounce/square inch","pascal","petabar","petapascal","picobar","picopascal","pieze","pound/square foot","pound/square inch","poundal/square foot","sthene/square meter","technical atmosphere","terabar","terapascal","ton/square foot [long]","ton/square foot [short]","ton/square inch [long]","ton/square inch [short]","ton/square meter","torr","Water Column [centimeter]","Water Column [inch]","Water Column [millimeter]","yoctobar","yoctopascal","yottabar","yottapascal","zeptobar","zeptopascal","zettabar","zettapascal","C","F","K","celcius","fromBase","k","toBase","c","fahrenheit","kelvin","rankine","reaumur","acceleration","distance","velocityOverAcceleration","distanceOverVelocity","ns","ms","h","d","w","shake","hour","day","week","fortnight","month","year","decade","century","microsecond","millennium","millisecond","nanosecond","dyne centimeter","gram centimeter","kilogram centimeter","kilogram meter","kilonewton meter","meganewton meter","micronewton meter","millinewton meter","newton centimeter","ounce foot","ounce inch","pound foot","poundal foot","pound inch","accelerationAndTime","kph","mph","benz","centimeter/day","centimeter/hour","centimeter/minute","centimeter/second","dekameter/day","dekameter/hour","dekameter/minute","dekameter/second","foot/day","foot/hour","foot/minute","foot/second","furlong/day [survey]","furlong/fortnight [survey]","furlong/hour [survey]","furlong/minute [survey]","furlong/second [survey]","hectometer/day","hectometer/hour","hectometer/minute","hectometer/second","inch/day","inch/hour","inch/minute","inch/second","kilometer/day","kilometer/hour","kilometer/minute","kilometer/second","knot","league/day [statute]","league/hour [statute]","league/minute [statute]","league/second [statute]","mach","megameter/day","megameter/hour","megameter/minute","megameter/second","meter/day","meter/hour","meter/minute","meter/second","mile/day","mile/hour","mile/minute","mile/second","millimeter/day","millimeter/hour","millimeter/minute","millimeter/second","millimeter/microsecond","millimeter / 100 microsecond","nautical mile/day","nautical mile/hour","nautical mile/minute","nautical mile/second","speed of light [air]","speed of light [glass]","speed of light [ice]","speed of light [vacuum]","speed of light [water]","speed of sound [air]","speed of sound [metal]","speed of sound [water]","yard/day","yard/hour","yard/minute","yard/second","dyne second/cm¬≤","gram-force second/cm¬≤","kilogram-force second/m¬≤","newton second/m¬≤","pound-force second/ft¬≤","pound-force second/in¬≤","poundal hour/ft¬≤","poundal second/ft¬≤","centipoise","decipoise","dyne second/square centimeter","gram-force second/square centimeter","gram/centimeter second","kilogram-force second/square meter","kilogram/meter hour","kilogram/meter second","millipascal second","millipoise","newton second/square meter","pascal second","poise","poiseuille [France]","pound-force second/square foot","pound-force second/square inch","pound/foot hour","pound/foot second","poundal hour/square foot","poundal second/square foot","reyn","slug/foot second","lbf-S/square foot","N-S/square meter","water(20 C)","water(40 C)","heavy oil(20 C)","heavy oil(40 C)","glycerin(20 C)","glycerin(40 C)","SAE 5W(-18 C)","SAE 10W(-18 C)","SAE 20(-18 C)","SAE 5W(99 C)","SAE 10W(99 C)","SAE 20(99 C)","centistokes","lentor","liter/cm day","liter/cm hour","liter/cm minute","liter/cm second","poise cm¬≥/gram&nbsp;&nbsp;","cm¬≤/day","cm¬≤/hour","cm¬≤/minute","cm¬≤/second","ft¬≤/day","ft¬≤/hour","ft¬≤/minute","ft¬≤/second","in¬≤/day","in¬≤/hour","in¬≤/minute","in¬≤/second","m¬≤/day","m¬≤/hour","m¬≤/minute","m¬≤/second","mm¬≤/day","mm¬≤/hour","mm¬≤/minute","mm¬≤/second","stokes","stere","megaliter","hectare meter","acre foot","acre foot [US survey]","acre inch","barrel [UK, wine]","barrel [UK]","barrel [US, dry]","barrel [US, federal]","barrel [US, liquid]","barrel [US, petroleum]","board foot","bucket [UK]","bucket [US]","bushel [UK]","bushel [US, dry]","cord [firewood]","cord foot [timber]","milliliter","cubic cubit [ancient egypt]","liter","cubic foot","cubic inch","cubic kilometer","cubic mile","cubic micrometer","microliter","cup [Canada]","cup [metric]","cup [US]","deciliter","dekaliter","drum [US, petroleum]","drum [metric, petroleum]","fifth","imperial gallon","gallon [US, dry]","gallon [US, liquid]","gill [UK]","gill [US]","hectoliter","hogshead [UK]","hogshead [US]","jigger","measure [ancient hebrew]","minim [UK]","minim [US]","ounce [UK, liquid]","shot","peck [UK]","peck [US]","pint [UK]","pint [US, dry]","pint [US, liquid]","pipe [UK]","pipe [US]","quart [Germany]","quart [ancient hebrew]","quart [UK]","quart [US, dry]","quart [US, liquid]","quarter [UK, liquid]","Tablespoon [metric]","Tablespoon [UK]","Tablespoon [US]","Teaspoon [metric]","Teaspoon [UK]","Teaspoon [US]","Converter","Units","register","compare","b","x","y","len","min","isBuffer","Buffer","_isBuffer","pToString","obj","Object","prototype","toString","isView","arrbuf","ArrayBuffer","DataView","buffer","getName","func","util","isFunction","functionsHaveNames","match","regex","truncate","slice","inspect","something","rawname","getMessage","actual","operator","expected","fail","message","stackStartFunction","assert","AssertionError","ok","value","_deepEqual","strict","memos","isDate","getTime","isRegExp","source","multiline","lastIndex","ignoreCase","Float32Array","Float64Array","Uint8Array","actualIndex","indexOf","push","objEquiv","isArguments","object","actualVisitedObjects","undefined","isPrimitive","getPrototypeOf","aIsArgs","bIsArgs","pSlice","key","ka","objectKeys","kb","sort","notDeepStrictEqual","expectedException","test","isPrototypeOf","_tryBlock","block","error","_throws","shouldThrow","TypeError","userProvidedMessage","isUnwantedException","isError","isUnexpectedException","hasOwn","hasOwnProperty","Array","options","generatedMessage","captureStackTrace","err","stack","out","fn_name","idx","next_line","substring","inherits","equal","notEqual","deepEqual","deepStrictEqual","notDeepEqual","strictEqual","notStrictEqual","throws","doesNotThrow","ifError","keys","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","run","Item","array","noop","process","nextTick","args","arguments","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","create","ctor","superCtor","super_","constructor","enumerable","writable","configurable","TempCtor","arg","copy","fill","readUInt8","opts","ctx","seen","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","str","styleType","style","styles","arrayToHash","hash","forEach","val","recurseTimes","ret","isString","primitive","formatPrimitive","visibleKeys","getOwnPropertyNames","formatError","RegExp","Date","braces","isArray","toUTCString","output","formatArray","map","formatProperty","pop","reduceToSingleString","simple","JSON","stringify","replace","isNumber","isNull","String","desc","getOwnPropertyDescriptor","get","set","split","join","substr","numLinesEst","reduce","prev","cur","ar","re","isObject","objectToString","pad","timestamp","getHours","getMinutes","getSeconds","getDate","months","getMonth","prop","formatRegExp","format","objects","Number","_","deprecate","fn","msg","noDeprecation","warned","throwDeprecation","traceDeprecation","console","trace","debugEnviron","debugs","debuglog","NODE_DEBUG","toUpperCase","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","null","string","date","regexp","isNullOrUndefined","isSymbol","log","origin","add","measureParser","convert","typeName","typeDef","from","fromValue","fromUnit","param","to","toUnit","calc","unit","using","converter","hasConverter","with","paramTypeName","paramTypeDef","calcBase","_typeof","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_value","return","isCompatible","toType","canConvert","unitCache","def","UnitDefinition","unregister","available","_this","types","getUnitTypeName","find","data","_this2","_classCallCheck","alias","converterName","converterFn","resolveUnit","type","_this3","some","UNIT_VALUE_REGEXP","isNaN","parseFloat"],"mappings":"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","file":"universal-converter.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\n\nmodule.exports = {\n  name: 'acceleration',\n  conversion: {\n    params: {\n      initialVelocity: 'velocity',\n      velocity: 'velocity',\n      time: 'time'\n    },\n    converters: {\n      velocityOverTime(params) {\n        return ((params.velocity || 0) - (params.initialVelocity || 0)) / params.time;\n      }\n    }\n  },\n  base: 'meter/square second',\n  aliases: {\n    'G': 'g-unit'\n  },\n  units: {\n    'centigal': 0.0001,\n    'centimeter/square second': 0.01,\n    'decigal': 0.001,\n    'decimeter/square second': 0.1,\n    'dekameter/square second': 10,\n    'foot/square second': 0.3048,\n    'gal': 0.01,\n    'galileo': 0.01,\n    'gn': 9.80665,\n    'grav': 9.80665,\n    'g-unit': 9.80665,\n    'hectometer/square second': 100,\n    'kilometer/hour second': 0.2777777777777778,\n    'kilometer/square second': 1000,\n    'inch/square second': 0.0254,\n    'meter/square second': 1,\n    'mile/square second': 1609.344,\n    'mile/hour minute': 0.007450666666666667,\n    'mile/hour second': 0.44704,\n    'milligal': 0.00001,\n    'millimeter/square second': 0.001\n  }\n};\n","module.exports = {\n  name: 'angle',\n  //conversion: {},\n  base: 'radian',\n  //aliases: { },\n  units: {\n    'radian': 1,\n    'mil': Math.PI / 3200,\n    'grad': Math.PI / 200,\n    'degree': Math.PI / 180,\n    'minute': Math.PI / (180 * 60),\n    'second': Math.PI / (180 * 3600),\n    'point': Math.PI / 16,\n    '1/16 circle': Math.PI / 8,\n    '1/10 circle': Math.PI / 5,\n    '1/8 circle': Math.PI / 4,\n    '1/6 circle': Math.PI / 3,\n    '1/4 circle': Math.PI / 2,\n    '1/2 circle': Math.PI,\n    'full circle': 2 * Math.PI\n  }\n};\n","module.exports = {\n  name: 'area',\n  conversion: {\n    params: {\n      width: 'distance',\n      length: 'distance'\n    },\n    converters: {\n      squareArea(params) {\n        return params.width * params.width;\n      },\n      rectangleArea(params) {\n        return params.width * params.length;\n      }\n    }\n  },\n  base: 'square meter',\n  aliases: { ¬†\n    'arpent': 'arpent [Canada]',\n    'kattha': 'kattha [Nepal]',\n    'perche': 'perche [Canada]',\n    'tatami': 'tatami [Japan]',\n    'yard': 'square yard'\n  },\n  units: {\n    'acre': 0.09290304 * 43560,\n    'acre [suburbs]': 0.09290304 * 36000,\n    'acre [survey]': 0.092903412 * 43560,\n    'acre [Ireland]': 6555,\n    'are': 100,\n    'arpent [Canada]': 3418.89,\n    'barn': 1e-28,\n    'bovate': 60000,\n    'bunder': 10000,\n    'caballeria [Spain/Peru]': 400000,\n    'caballeria [Central America]': 450000,\n    'caballeria [Cuba]': 134200,\n    'carreau': 12900,\n    'carucate': 486000,\n    'cawney': (4 / 3) * (0.09290304 * 43560),\n    'centiare': 1,\n    'cong': 1000,\n    'cover': 2698,\n    'cuerda': 3930,\n    'dekare': 1000,\n    'dessiatina': 10925,\n    'dhur': 16.929,\n    'dunum, dunham': 1000,\n    'fall [Scots]': 32.15,\n    'fall [English]': 47.03,\n    'fanega': 6430,\n    'farthingdale': 1012,\n    'hacienda': 89600000,\n    'hectare': 10000,\n    'hide': 486000,\n    'homestead': 647500,\n    'hundred': 50000000,\n    'jerib': 2000,\n    'jitro, joch, jutro': 5755,\n    'jo [Japan]': 1.62,\n    'kappland': 154.26,\n    'kattha [Nepal]': 338,\n    'labor': 716850,\n    'legua': 17920000,\n    'manzana [Costa Rican]': 6988.96,\n    'manzana [Argentina]': 10000,\n    'manzana [Nicaragua]': 70.44 * 100,\n    'morgen [Germany]': 2500,\n    'morgen [South Africa]': 8567,\n    'mu': (1 / 15) * 10000,\n    'ngarn': 400,\n    'nook': 80937.128,\n    'oxgang': 60000,\n    'perch': 25.29285264,\n    'perche [Canada]': 34.19,\n    'ping': 3.305,\n    'pyong': 3.306,\n    'rai': 1600,\n    'rood': 1011.7141,\n    'section': 2589998.5,\n    'shed': 10e-52,\n    'sitio': 18000000,\n    'square': 9.290304,\n    'square angstrom': 1e-20,\n    'square astronomical unit': 2.2379523e+22,\n    'square attometer': 1e-36,\n    'square bicron': 1e-24,\n    'square centimeter': 0.0001,\n    'square chain [Gunter, survey]': 404.68726,\n    'square chain [Ramden, Engineer]': 929.03412,\n    'square city block [East U.S.]': 6474.97027584,\n    'square city block [Midwest U.S.]': 10117.141056,\n    'square city block [South, West U.S.]': 25899.88110336,\n    'square cubit': 0.20903184,\n    'square decimeter': 0.01,\n    'square dekameter': 100,\n    'square exameter': 1e+36,\n    'square fathom': 3.3445228,\n    'square femtometer': 1e-30,\n    'square fermi': 1e-30,\n    'square foot': 0.09290304,\n    'square foot [survey]': 0.092903412,\n    'square furlong': 40468.726,\n    'square gigameter': 1e+18,\n    'square hectometer': 10000,\n    'square inch': 0.09290304 / 144,\n    'square inch [survey]': 0.092903412 / 144,\n    'square kilometer': 1000000,\n    'square league [nautical]': 3.0869136e+07,\n    'square league [U.S. statute]': 2.3309986e+07,\n    'square light year': 8.9505412e+31,\n    'square link [Gunter, survey]': 0.040468726,\n    'square link [Ramden, Engineer]': 0.092903412,\n    'square megameter': 1e+12,\n    'square meter': 1,\n    'square microinch': 1e-6 * 6.4516e-10,\n    'square micrometer': 1e-12,\n    'square micromicron': 1e-24,\n    'square micron': 1e-12,\n    'square mil': 6.4516e-10,\n    'square mile': 0.09290304 * 27878400,\n    'square mile [nautical]': 3429904,\n    'square mile [survey, U.S. statute]': 2589998.5,\n    'square millimeter': 0.000001,\n    'square millimicron': 1e-18,\n    'square myriameter': 1e+8,\n    'square nanometer': 1e-18,\n    'square Paris foot': 0.1055,\n    'square parsec': 9.5214087e+32,\n    'square perch': 25.292954,\n    'square perche': 51.072,\n    'square petameter': 1e+30,\n    'square picometer': 1e-24,\n    'square rod': 0.092903412 * 272.25,\n    'square tenthmeter': 1e-20,\n    'square terameter': 1e+24,\n    'square thou': 6.4516e-10,\n    'square vara [California]': 0.70258205,\n    'square vara [Texas]': 0.71684731,\n    'square yard': 0.09290304 * 9,\n    'square yard [survey]': 0.092903412 * 9,\n    'square yoctometer': 1e-48,\n    'square yottameter': 1e+48,\n    'stang': 2709,\n    'stremma': 1000,\n    'tarea': 628.8,\n    'tatami [Japan]': 1.62,\n    't√∏nde land': 5516,\n    'township': 0.092903412 * 43560 * 23040,\n    'tsubo': 3.3058,\n    'tunnland': 4936.4,\n    'virgate': 120000\n  }\n};\n","module.exports = {\n  name: 'binary',\n  //converters: [],\n  base: 'byte',\n  aliases: {\n    'KB': 'kilobyte',\n    'MB': 'megabyte',\n    'GB': 'gigabyte',\n    'TB': 'terabyte',\n    'PB': 'petabyte'\n  },\n  units: {\n    'bit': 1 / 8,\n    'byte': 1,\n    'kilobyte': 1024,\n    'megabyte': 1024 * 1024,\n    'gigabyte': 1024 * 1024 * 1024,\n    'terabyte': 1024 * 1024 * 1024 * 1024,\n    'petabyte': 1024 * 1024 * 1024 * 1024 * 1024\n  }\n};\n","module.exports = {\n  name: 'density',\n  //conversion: {},\n  base: 'gram/litre',\n  //aliases: { },\n  units: {\n    'attogram/attoliter': 1,\n    'attogram/centiliter': 1e-16,\n    'attogram/cubic attometer': 1e+33,\n    'attogram/cubic centimeter': 1e-15,\n    'attogram/cubic decameter': 1e-24,\n    'attogram/cubic decimeter': 1e-18,\n    'attogram/cubic dekameter': 1e-24,\n    'attogram/cubic exameter': 1e-75,\n    'attogram/cubic femtometer': 1.0e+24,\n    'attogram/cubic gigameter': 1e-48,\n    'attogram/cubic hectometer': 1e-27,\n    'attogram/cubic kilometer': 1e-30,\n    'attogram/cubic megameter': 1e-39,\n    'attogram/cubic meter': 1e-21,\n    'attogram/cubic micrometer': 0.001,\n    'attogram/cubic millimeter': 1e-12,\n    'attogram/cubic myriameter': 1e-33,\n    'attogram/cubic nanometer': 1000000,\n    'attogram/cubic petameter': 1e-66,\n    'attogram/cubic picometer': 1.0e+15,\n    'attogram/cubic terameter': 1e-57,\n    'attogram/cubic yoctometer': 1e+51,\n    'attogram/cubic yottameter': 1e-93,\n    'attogram/cubic zeptometer': 1e+42,\n    'attogram/cubic zettameter': 1e-84,\n    'attogram/decaliter': 1e-19,\n    'attogram/deciliter': 1e-17,\n    'attogram/dekaliter': 1e-19,\n    'attogram/exaliter': 1e-36,\n    'attogram/femtoliter': 0.001,\n    'attogram/gigaliter': 1e-27,\n    'attogram/hectoliter': 1e-20,\n    'attogram/kiloliter': 1e-21,\n    'attogram/liter': 1e-18,\n    'attogram/litre': 1e-18,\n    'attogram/megaliter': 1e-24,\n    'attogram/microliter': 1e-12,\n    'attogram/milliliter': 1e-15,\n    'attogram/myrialiter': 1e-22,\n    'attogram/nanoliter': 1.0e-09,\n    'attogram/petaliter': 1e-33,\n    'attogram/picoliter': 1.0e-06,\n    'attogram/teraliter': 1e-30,\n    'attogram/yoctoliter': 1000000,\n    'attogram/yottaliter': 1e-42,\n    'attogram/zeptoliter': 1000,\n    'attogram/zettaliter': 1e-39,\n    'centigram/attoliter': 1e+16,\n    'centigram/centiliter': 1,\n    'centigram/cubic attometer': 1e+49,\n    'centigram/cubic centimeter': 10,\n    'centigram/cubic decameter': 1.0e-08,\n    'centigram/cubic decimeter': 0.01,\n    'centigram/cubic dekameter': 1.0e-08,\n    'centigram/cubic exameter': 1e-59,\n    'centigram/cubic femtometer': 1.0e+40,\n    'centigram/cubic gigameter': 1e-32,\n    'centigram/cubic hectometer': 1.0e-11,\n    'centigram/cubic kilometer': 1e-14,\n    'centigram/cubic megameter': 1e-23,\n    'centigram/cubic meter': 0.00001,\n    'centigram/cubic micrometer': 1e+13,\n    'centigram/cubic millimeter': 10000,\n    'centigram/cubic myriameter': 1.0e-17,\n    'centigram/cubic nanometer': 1e+22,\n    'centigram/cubic petameter': 1.00e-50,\n    'centigram/cubic picometer': 1.0e+31,\n    'centigram/cubic terameter': 1e-41,\n    'centigram/cubic yoctometer': 1e+67,\n    'centigram/cubic yottameter': 1e-77,\n    'centigram/cubic zeptometer': 1e+58,\n    'centigram/cubic zettameter': 1e-68,\n    'centigram/decaliter': 0.001,\n    'centigram/deciliter': 0.1,\n    'centigram/dekaliter': 0.001,\n    'centigram/exaliter': 1e-20,\n    'centigram/femtoliter': 1e+13,\n    'centigram/gigaliter': 1e-11,\n    'centigram/hectoliter': 0.0001,\n    'centigram/kiloliter': 0.00001,\n    'centigram/liter': 0.01,\n    'centigram/litre': 0.01,\n    'centigram/megaliter': 1.0e-08,\n    'centigram/microliter': 10000,\n    'centigram/milliliter': 10,\n    'centigram/myrialiter': 0.000001,\n    'centigram/nanoliter': 1.0e+07,\n    'centigram/petaliter': 1e-17,\n    'centigram/picoliter': 1.0e+10,\n    'centigram/teraliter': 1e-14,\n    'centigram/yoctoliter': 1e+22,\n    'centigram/yottaliter': 1e-26,\n    'centigram/zeptoliter': 1e+19,\n    'centigram/zettaliter': 1e-23,\n    'decagram/attoliter': 1e+19,\n    'decagram/centiliter': 1000,\n    'decagram/cubic attometer': 1e+52,\n    'decagram/cubic centimeter': 10000,\n    'decagram/cubic decameter': 0.00001,\n    'decagram/cubic decimeter': 10,\n    'decagram/cubic dekameter': 0.00001,\n    'decagram/cubic exameter': 1e-56,\n    'decagram/cubic femtometer': 1e+43,\n    'decagram/cubic gigameter': 1e-29,\n    'decagram/cubic hectometer': 0.00000001,\n    'decagram/cubic kilometer': 1e-11,\n    'decagram/cubic megameter': 1.0e-20,\n    'decagram/cubic meter': 0.01,\n    'decagram/cubic micrometer': 1e+16,\n    'decagram/cubic millimeter': 10000000,\n    'decagram/cubic myriameter': 1e-14,\n    'decagram/cubic nanometer': 1e+25,\n    'decagram/cubic petameter': 1e-47,\n    'decagram/cubic picometer': 1.0e+34,\n    'decagram/cubic terameter': 1e-38,\n    'decagram/cubic yoctometer': 1e+70,\n    'decagram/cubic yottameter': 1e-74,\n    'decagram/cubic zeptometer': 1e+61,\n    'decagram/cubic zettameter': 1e-65,\n    'decagram/decaliter': 1,\n    'decagram/deciliter': 100,\n    'decagram/dekaliter': 1,\n    'decagram/exaliter': 1e-17,\n    'decagram/femtoliter': 1e+16,\n    'decagram/gigaliter': 1.0e-08,\n    'decagram/hectoliter': 0.1,\n    'decagram/kiloliter': 0.01,\n    'decagram/liter': 10,\n    'decagram/litre': 10,\n    'decagram/megaliter': 0.00001,\n    'decagram/microliter': 1.0e+07,\n    'decagram/milliliter': 10000,\n    'decagram/myrialiter': 0.001,\n    'decagram/nanoliter': 1.0e+10,\n    'decagram/petaliter': 1e-14,\n    'decagram/picoliter': 1e+13,\n    'decagram/teraliter': 1e-11,\n    'decagram/yoctoliter': 1e+25,\n    'decagram/yottaliter': 1e-23,\n    'decagram/zeptoliter': 1e+22,\n    'decagram/zettaliter': 1e-20,\n    'decigram/attoliter': 1e+17,\n    'decigram/centiliter': 10,\n    'decigram/cubic attometer': 1e+50,\n    'decigram/cubic centimeter': 100,\n    'decigram/cubic decameter': 0.0000001,\n    'decigram/cubic decimeter': 0.1,\n    'decigram/cubic dekameter': 1.0e-07,\n    'decigram/cubic exameter': 1e-58,\n    'decigram/cubic femtometer': 1e+41,\n    'decigram/cubic gigameter': 1e-31,\n    'decigram/cubic hectometer': 1.0e-10,\n    'decigram/cubic kilometer': 1e-13,\n    'decigram/cubic megameter': 1e-22,\n    'decigram/cubic meter': 0.0001,\n    'decigram/cubic micrometer': 1e+14,\n    'decigram/cubic millimeter': 100000,\n    'decigram/cubic myriameter': 1.0e-16,\n    'decigram/cubic nanometer': 1e+23,\n    'decigram/cubic petameter': 1e-49,\n    'decigram/cubic picometer': 1.0e+32,\n    'decigram/cubic terameter': 1e-40,\n    'decigram/cubic yoctometer': 1e+68,\n    'decigram/cubic yottameter': 1e-76,\n    'decigram/cubic zeptometer': 1e+59,\n    'decigram/cubic zettameter': 1e-67,\n    'decigram/decaliter': 0.01,\n    'decigram/deciliter': 1,\n    'decigram/dekaliter': 0.01,\n    'decigram/exaliter': 1e-19,\n    'decigram/femtoliter': 1e+14,\n    'decigram/gigaliter': 1e-10,\n    'decigram/hectoliter': 0.001,\n    'decigram/kiloliter': 0.0001,\n    'decigram/liter': 0.1,\n    'decigram/litre': 0.1,\n    'decigram/megaliter': 1.0e-07,\n    'decigram/microliter': 100000,\n    'decigram/milliliter': 100,\n    'decigram/myrialiter': 0.00001,\n    'decigram/nanoliter': 1.0e+08,\n    'decigram/petaliter': 1e-16,\n    'decigram/picoliter': 1e+11,\n    'decigram/teraliter': 1e-13,\n    'decigram/yoctoliter': 1e+23,\n    'decigram/yottaliter': 1e-25,\n    'decigram/zeptoliter': 1e+20,\n    'decigram/zettaliter': 1e-22,\n    'dekagram/attoliter': 1e+19,\n    'dekagram/centiliter': 1000,\n    'dekagram/cubic attometer': 1e+52,\n    'dekagram/cubic centimeter': 10000,\n    'dekagram/cubic decameter': 0.00001,\n    'dekagram/cubic decimeter': 10,\n    'dekagram/cubic dekameter': 0.00001,\n    'dekagram/cubic exameter': 1e-56,\n    'dekagram/cubic femtometer': 1e+43,\n    'dekagram/cubic gigameter': 1e-29,\n    'dekagram/cubic hectometer': 0.00000001,\n    'dekagram/cubic kilometer': 1e-11,\n    'dekagram/cubic megameter': 1.0e-20,\n    'dekagram/cubic meter': 0.01,\n    'dekagram/cubic micrometer': 1e+16,\n    'dekagram/cubic millimeter': 1.0e+07,\n    'dekagram/cubic myriameter': 1.0e-14,\n    'dekagram/cubic nanometer': 1.0e+25,\n    'dekagram/cubic petameter': 1e-47,\n    'dekagram/cubic picometer': 1.0e+34,\n    'dekagram/cubic terameter': 1e-38,\n    'dekagram/cubic yoctometer': 1e+70,\n    'dekagram/cubic yottameter': 1e-74,\n    'dekagram/cubic zeptometer': 1e+61,\n    'dekagram/cubic zettameter': 1e-65,\n    'dekagram/decaliter': 1,\n    'dekagram/deciliter': 100,\n    'dekagram/dekaliter': 1,\n    'dekagram/exaliter': 1e-17,\n    'dekagram/femtoliter': 1e+16,\n    'dekagram/gigaliter': 1.0e-08,\n    'dekagram/hectoliter': 0.1,\n    'dekagram/kiloliter': 0.01,\n    'dekagram/liter': 10,\n    'dekagram/litre': 10,\n    'dekagram/megaliter': 1.0e-05,\n    'dekagram/microliter': 1.0e+07,\n    'dekagram/milliliter': 10000,\n    'dekagram/myrialiter': 0.001,\n    'dekagram/nanoliter': 1.0e+10,\n    'dekagram/petaliter': 1e-14,\n    'dekagram/picoliter': 1e+13,\n    'dekagram/teraliter': 1e-11,\n    'dekagram/yoctoliter': 1e+25,\n    'dekagram/yottaliter': 1e-23,\n    'dekagram/zeptoliter': 1e+22,\n    'dekagram/zettaliter': 1e-20,\n    'exagram/attoliter': 1e+36,\n    'exagram/centiliter': 1e+20,\n    'exagram/cubic attometer': 1e+69,\n    'exagram/cubic centimeter': 1e+21,\n    'exagram/cubic decameter': 1e+12,\n    'exagram/cubic decimeter': 1e+18,\n    'exagram/cubic dekameter': 1e+12,\n    'exagram/cubic exameter': 1e-39,\n    'exagram/cubic femtometer': 1e+60,\n    'exagram/cubic gigameter': 1e-12,\n    'exagram/cubic hectometer': 1000000000,\n    'exagram/cubic kilometer': 1000000,\n    'exagram/cubic megameter': 1.0e-03,\n    'exagram/cubic meter': 1e+15,\n    'exagram/cubic micrometer': 1e+33,\n    'exagram/cubic millimeter': 1e+24,\n    'exagram/cubic myriameter': 1000,\n    'exagram/cubic nanometer': 1e+42,\n    'exagram/cubic petameter': 1e-30,\n    'exagram/cubic picometer': 1e+51,\n    'exagram/cubic terameter': 1e-21,\n    'exagram/cubic yoctometer': 1e+87,\n    'exagram/cubic yottameter': 1.0e-57,\n    'exagram/cubic zeptometer': 1e+78,\n    'exagram/cubic zettameter': 1e-48,\n    'exagram/decaliter': 1e+17,\n    'exagram/deciliter': 1e+19,\n    'exagram/dekaliter': 1e+17,\n    'exagram/exaliter': 1,\n    'exagram/femtoliter': 1e+33,\n    'exagram/gigaliter': 1.0e+09,\n    'exagram/hectoliter': 1e+16,\n    'exagram/kiloliter': 1e+15,\n    'exagram/liter': 1e+18,\n    'exagram/litre': 1e+18,\n    'exagram/megaliter': 1e+12,\n    'exagram/microliter': 1e+24,\n    'exagram/milliliter': 1e+21,\n    'exagram/myrialiter': 1e+14,\n    'exagram/nanoliter': 1e+27,\n    'exagram/petaliter': 1000,\n    'exagram/picoliter': 1e+30,\n    'exagram/teraliter': 1000000,\n    'exagram/yoctoliter': 1e+42,\n    'exagram/yottaliter': 1.0e-06,\n    'exagram/zeptoliter': 1e+39,\n    'exagram/zettaliter': 0.001,\n    'femtogram/attoliter': 1000,\n    'femtogram/centiliter': 1e-13,\n    'femtogram/cubic attometer': 1e+36,\n    'femtogram/cubic centimeter': 1e-12,\n    'femtogram/cubic decameter': 1e-21,\n    'femtogram/cubic decimeter': 1e-15,\n    'femtogram/cubic dekameter': 1e-21,\n    'femtogram/cubic exameter': 1e-72,\n    'femtogram/cubic femtometer': 1e+27,\n    'femtogram/cubic gigameter': 1e-45,\n    'femtogram/cubic hectometer': 1e-24,\n    'femtogram/cubic kilometer': 1e-27,\n    'femtogram/cubic megameter': 1e-36,\n    'femtogram/cubic meter': 1e-18,\n    'femtogram/cubic micrometer': 1,\n    'femtogram/cubic millimeter': 1.0e-09,\n    'femtogram/cubic myriameter': 1e-30,\n    'femtogram/cubic nanometer': 1.0e+09,\n    'femtogram/cubic petameter': 1e-63,\n    'femtogram/cubic picometer': 1.0e+18,\n    'femtogram/cubic terameter': 1e-54,\n    'femtogram/cubic yoctometer': 1e+54,\n    'femtogram/cubic yottameter': 1e-90,\n    'femtogram/cubic zeptometer': 1e+45,\n    'femtogram/cubic zettameter': 1e-81,\n    'femtogram/decaliter': 1e-16,\n    'femtogram/deciliter': 1e-14,\n    'femtogram/dekaliter': 1e-16,\n    'femtogram/exaliter': 1e-33,\n    'femtogram/femtoliter': 1,\n    'femtogram/gigaliter': 1e-24,\n    'femtogram/hectoliter': 1e-17,\n    'femtogram/kiloliter': 1e-18,\n    'femtogram/liter': 1e-15,\n    'femtogram/litre': 1e-15,\n    'femtogram/megaliter': 1e-21,\n    'femtogram/microliter': 1.0e-09,\n    'femtogram/milliliter': 1e-12,\n    'femtogram/myrialiter': 1e-19,\n    'femtogram/nanoliter': 0.000001,\n    'femtogram/petaliter': 1e-30,\n    'femtogram/picoliter': 0.001,\n    'femtogram/teraliter': 1e-27,\n    'femtogram/yoctoliter': 1.0e+09,\n    'femtogram/yottaliter': 1e-39,\n    'femtogram/zeptoliter': 1000000,\n    'femtogram/zettaliter': 1e-36,\n    'gigagram/attoliter': 1e+27,\n    'gigagram/centiliter': 1e+11,\n    'gigagram/cubic attometer': 1e+60,\n    'gigagram/cubic centimeter': 1e+12,\n    'gigagram/cubic decameter': 1000,\n    'gigagram/cubic decimeter': 1.0e+09,\n    'gigagram/cubic dekameter': 1000,\n    'gigagram/cubic exameter': 1e-48,\n    'gigagram/cubic femtometer': 1e+51,\n    'gigagram/cubic gigameter': 1e-21,\n    'gigagram/cubic hectometer': 1,\n    'gigagram/cubic kilometer': 0.001,\n    'gigagram/cubic megameter': 1e-12,\n    'gigagram/cubic meter': 1000000,\n    'gigagram/cubic micrometer': 1e+24,\n    'gigagram/cubic millimeter': 1e+15,\n    'gigagram/cubic myriameter': 0.000001,\n    'gigagram/cubic nanometer': 1e+33,\n    'gigagram/cubic petameter': 1.0e-39,\n    'gigagram/cubic picometer': 1e+42,\n    'gigagram/cubic terameter': 1.0e-30,\n    'gigagram/cubic yoctometer': 1e+78,\n    'gigagram/cubic yottameter': 1e-66,\n    'gigagram/cubic zeptometer': 1e+69,\n    'gigagram/cubic zettameter': 1e-57,\n    'gigagram/decaliter': 1.0e+08,\n    'gigagram/deciliter': 1.0e+10,\n    'gigagram/dekaliter': 1.0e+08,\n    'gigagram/exaliter': 1.0e-09,\n    'gigagram/femtoliter': 1e+24,\n    'gigagram/gigaliter': 1,\n    'gigagram/hectoliter': 1.0e+07,\n    'gigagram/kiloliter': 1.0e+06,\n    'gigagram/liter': 1.0e+09,\n    'gigagram/litre': 1.0e+09,\n    'gigagram/megaliter': 1000,\n    'gigagram/microliter': 1e+15,\n    'gigagram/milliliter': 1e+12,\n    'gigagram/myrialiter': 100000,\n    'gigagram/nanoliter': 1e+18,\n    'gigagram/petaliter': 0.000001,\n    'gigagram/picoliter': 1e+21,\n    'gigagram/teraliter': 0.001,\n    'gigagram/yoctoliter': 1e+33,\n    'gigagram/yottaliter': 1e-15,\n    'gigagram/zeptoliter': 1e+30,\n    'gigagram/zettaliter': 1e-12,\n    'gigatonne/attoliter': 1e+33,\n    'gigatonne/centiliter': 1e+17,\n    'gigatonne/cubic attometer': 1e+66,\n    'gigatonne/cubic centimeter': 1e+18,\n    'gigatonne/cubic decameter': 1000000000,\n    'gigatonne/cubic decimeter': 1e+15,\n    'gigatonne/cubic dekameter': 1.0e+09,\n    'gigatonne/cubic exameter': 1.0e-42,\n    'gigatonne/cubic femtometer': 1e+57,\n    'gigatonne/cubic gigameter': 1e-15,\n    'gigatonne/cubic hectometer': 1.0e+06,\n    'gigatonne/cubic kilometer': 1000,\n    'gigatonne/cubic megameter': 0.000001,\n    'gigatonne/cubic meter': 1e+12,\n    'gigatonne/cubic micrometer': 1e+30,\n    'gigatonne/cubic millimeter': 1e+21,\n    'gigatonne/cubic myriameter': 1.0e+00,\n    'gigatonne/cubic nanometer': 1e+39,\n    'gigatonne/cubic petameter': 1e-33,\n    'gigatonne/cubic picometer': 1e+48,\n    'gigatonne/cubic terameter': 1e-24,\n    'gigatonne/cubic yoctometer': 1e+84,\n    'gigatonne/cubic yottameter': 1e-60,\n    'gigatonne/cubic zeptometer': 1e+75,\n    'gigatonne/cubic zettameter': 1.0e-51,\n    'gigatonne/decaliter': 1e+14,\n    'gigatonne/deciliter': 1e+16,\n    'gigatonne/dekaliter': 1e+14,\n    'gigatonne/exaliter': 0.001,\n    'gigatonne/femtoliter': 1e+30,\n    'gigatonne/gigaliter': 1000000,\n    'gigatonne/hectoliter': 1e+13,\n    'gigatonne/kiloliter': 1e+12,\n    'gigatonne/liter': 1e+15,\n    'gigatonne/litre': 1e+15,\n    'gigatonne/megaliter': 1.0e+09,\n    'gigatonne/microliter': 1e+21,\n    'gigatonne/milliliter': 1e+18,\n    'gigatonne/myrialiter': 1e+11,\n    'gigatonne/nanoliter': 1e+24,\n    'gigatonne/petaliter': 1,\n    'gigatonne/picoliter': 1e+27,\n    'gigatonne/teraliter': 1000,\n    'gigatonne/yoctoliter': 1e+39,\n    'gigatonne/yottaliter': 1.0e-09,\n    'gigatonne/zeptoliter': 1e+36,\n    'gigatonne/zettaliter': 0.000001,\n    'grain/cubic foot': ((0.45359237 / 16) * (192 / 175) / 480) / ((0.0037854118 / 231) * 1728),\n    'grain/cubic inch': ((0.45359237 / 16) * (192 / 175) / 480) / (0.0037854118 / 231),\n    'grain/cubic mile': ((0.45359237 / 16) * (192 / 175) / 480) / (((0.0037854118 / 231) * 1728 * 27) * 5451776000),\n    'grain/cubic yard': ((0.45359237 / 16) * (192 / 175) / 480) / ((0.0037854118 / 231) * 1728 * 27),\n    'grain/gallon [UK]': ((0.45359237 / 16) * (192 / 175) / 480) / 0.00454609,\n    'grain/gallon [US dry]': ((0.45359237 / 16) * (192 / 175) / 480) / 0.0044048838,\n    'grain/gallon [US]': ((0.45359237 / 16) * (192 / 175) / 480) / 0.0037854118,\n    'grain/ounce [UK]': ((0.45359237 / 16) * (192 / 175) / 480) / (0.00454609 / 160),\n    'grain/ounce [US]': ((0.45359237 / 16) * (192 / 175) / 480) / (0.0037854118 / 128),\n    'grain/quart [UK]': ((0.45359237 / 16) * (192 / 175) / 480) / (0.00454609 / 4),\n    'grain/quart [US dry]': ((0.45359237 / 16) * (192 / 175) / 480) / (0.0044048838 / 4),\n    'grain/quart [US]': ((0.45359237 / 16) * (192 / 175) / 480) / (0.0037854118 / 4),\n    'gram/attoliter': 1e+18,\n    'gram/centiliter': 100,\n    'gram/cubic attometer': 1e+51,\n    'gram/cubic centimeter': 1000,\n    'gram/cubic decameter': 0.000001,\n    'gram/cubic decimeter': 1,\n    'gram/cubic dekameter': 0.000001,\n    'gram/cubic exameter': 1e-57,\n    'gram/cubic femtometer': 1e+42,\n    'gram/cubic gigameter': 1e-30,\n    'gram/cubic hectometer': 0.000000001,\n    'gram/cubic kilometer': 1e-12,\n    'gram/cubic megameter': 1.0e-21,\n    'gram/cubic meter': 0.001,\n    'gram/cubic micrometer': 1e+15,\n    'gram/cubic millimeter': 1.0e+06,\n    'gram/cubic myriameter': 1.0e-15,\n    'gram/cubic nanometer': 1.0e+24,\n    'gram/cubic petameter': 1e-48,\n    'gram/cubic picometer': 1.0e+33,\n    'gram/cubic terameter': 1e-39,\n    'gram/cubic yoctometer': 1e+69,\n    'gram/cubic yottameter': 1e-75,\n    'gram/cubic zeptometer': 1e+60,\n    'gram/cubic zettameter': 1e-66,\n    'gram/decaliter': 0.1,\n    'gram/deciliter': 10,\n    'gram/dekaliter': 0.1,\n    'gram/exaliter': 1e-18,\n    'gram/femtoliter': 1e+15,\n    'gram/gigaliter': 1.0e-09,\n    'gram/hectoliter': 0.01,\n    'gram/kiloliter': 0.001,\n    'gram/liter': 1,\n    'gram/litre': 1,\n    'gram/megaliter': 1.0e-06,\n    'gram/microliter': 1.0e+06,\n    'gram/milliliter': 1000,\n    'gram/myrialiter': 0.0001,\n    'gram/nanoliter': 1.0e+09,\n    'gram/petaliter': 1e-15,\n    'gram/picoliter': 1e+12,\n    'gram/teraliter': 1e-12,\n    'gram/yoctoliter': 1e+24,\n    'gram/yottaliter': 1e-24,\n    'gram/zeptoliter': 1e+21,\n    'gram/zettaliter': 1e-21,\n    'hectogram/attoliter': 1e+20,\n    'hectogram/centiliter': 10000,\n    'hectogram/cubic attometer': 1e+53,\n    'hectogram/cubic centimeter': 100000,\n    'hectogram/cubic decameter': 0.0001,\n    'hectogram/cubic decimeter': 100,\n    'hectogram/cubic dekameter': 0.0001,\n    'hectogram/cubic exameter': 1e-55,\n    'hectogram/cubic femtometer': 1e+44,\n    'hectogram/cubic gigameter': 1e-28,\n    'hectogram/cubic hectometer': 0.0000001,\n    'hectogram/cubic kilometer': 1e-10,\n    'hectogram/cubic megameter': 1.0e-19,\n    'hectogram/cubic meter': 0.1,\n    'hectogram/cubic micrometer': 1e+17,\n    'hectogram/cubic millimeter': 1.0e+08,\n    'hectogram/cubic myriameter': 1.0e-13,\n    'hectogram/cubic nanometer': 1.0e+26,\n    'hectogram/cubic petameter': 1e-46,\n    'hectogram/cubic picometer': 1e+35,\n    'hectogram/cubic terameter': 1e-37,\n    'hectogram/cubic yoctometer': 1e+71,\n    'hectogram/cubic yottameter': 1e-73,\n    'hectogram/cubic zeptometer': 1e+62,\n    'hectogram/cubic zettameter': 1e-64,\n    'hectogram/decaliter': 10,\n    'hectogram/deciliter': 1000,\n    'hectogram/dekaliter': 10,\n    'hectogram/exaliter': 1e-16,\n    'hectogram/femtoliter': 1e+17,\n    'hectogram/gigaliter': 1.0e-07,\n    'hectogram/hectoliter': 1,\n    'hectogram/kiloliter': 0.1,\n    'hectogram/liter': 100,\n    'hectogram/litre': 100,\n    'hectogram/megaliter': 0.0001,\n    'hectogram/microliter': 1.0e+08,\n    'hectogram/milliliter': 100000,\n    'hectogram/myrialiter': 0.01,\n    'hectogram/nanoliter': 1e+11,\n    'hectogram/petaliter': 1e-13,\n    'hectogram/picoliter': 1e+14,\n    'hectogram/teraliter': 1e-10,\n    'hectogram/yoctoliter': 1e+26,\n    'hectogram/yottaliter': 1e-22,\n    'hectogram/zeptoliter': 1e+23,\n    'hectogram/zettaliter': 1e-19,\n    'hundredweight/cubic foot [UK]': (0.45359237 * 112) / ((0.0037854118 / 231) * 1728),\n    'hundredweight/cubic foot [US]': (0.45359237 * 100) / ((0.0037854118 / 231) * 1728),\n    'hundredweight/cubic inch [UK]': (0.45359237 * 112) / (0.0037854118 / 231),\n    'hundredweight/cubic inch [US]': (0.45359237 * 100) / (0.0037854118 / 231),\n    'hundredweight/cubic mile [UK]': (0.45359237 * 112) / (((0.0037854118 / 231) * 1728 * 27) * 5451776000),\n    'hundredweight/cubic mile [US]': (0.45359237 * 100) / (((0.0037854118 / 231) * 1728 * 27) * 5451776000),\n    'hundredweight/cubic yard [UK]': (0.45359237 * 112) / ((0.0037854118 / 231) * 1728 * 27),\n    'hundredweight/cubic yard [US]': (0.45359237 * 100) / ((0.0037854118 / 231) * 1728 * 27),\n    'hundredweight/gallon [UK]': (0.45359237 * 112) / 0.00454609,\n    'hundredweight/gallon [US dry]': (0.45359237 * 100) / 0.0044048838,\n    'hundredweight/gallon [US]': (0.45359237 * 100)/0.0037854118,\n    'hundredweight/ounce [UK]': (0.45359237 * 112) / (0.00454609 / 160),\n    'hundredweight/ounce [US]': (0.45359237 * 100) / (0.0037854118 / 128),\n    'hundredweight/quart [UK]': (0.45359237 * 112) / (0.00454609 / 4),\n    'hundredweight/quart [US dry]': (0.45359237 * 100) / (0.0044048838 / 4),\n    'hundredweight/quart [US]': (0.45359237 * 100) / (0.0037854118 / 4),\n    'kilogram/attoliter': 1e+21,\n    'kilogram/centiliter': 100000,\n    'kilogram/cubic attometer': 1e+54,\n    'kilogram/cubic centimeter': 1000000,\n    'kilogram/cubic decameter': 0.001,\n    'kilogram/cubic decimeter': 1000,\n    'kilogram/cubic dekameter': 0.001,\n    'kilogram/cubic exameter': 1e-54,\n    'kilogram/cubic femtometer': 1e+45,\n    'kilogram/cubic gigameter': 1.0e-27,\n    'kilogram/cubic hectometer': 0.000001,\n    'kilogram/cubic kilometer': 1.0e-09,\n    'kilogram/cubic megameter': 1.0e-18,\n    'kilogram/cubic meter': 1,\n    'kilogram/cubic micrometer': 1e+18,\n    'kilogram/cubic millimeter': 1.0e+09,\n    'kilogram/cubic myriameter': 1e-12,\n    'kilogram/cubic nanometer': 1.0e+27,\n    'kilogram/cubic petameter': 1e-45,\n    'kilogram/cubic picometer': 1e+36,\n    'kilogram/cubic terameter': 1e-36,\n    'kilogram/cubic yoctometer': 1e+72,\n    'kilogram/cubic yottameter': 1e-72,\n    'kilogram/cubic zeptometer': 1e+63,\n    'kilogram/cubic zettameter': 1e-63,\n    'kilogram/decaliter': 100,\n    'kilogram/deciliter': 10000,\n    'kilogram/dekaliter': 100,\n    'kilogram/exaliter': 1e-15,\n    'kilogram/femtoliter': 1e+18,\n    'kilogram/gigaliter': 0.000001,\n    'kilogram/hectoliter': 10,\n    'kilogram/kiloliter': 1,\n    'kilogram/liter': 1000,\n    'kilogram/litre': 1000,\n    'kilogram/megaliter': 0.001,\n    'kilogram/microliter': 1.0e+09,\n    'kilogram/milliliter': 1000000,\n    'kilogram/myrialiter': 0.1,\n    'kilogram/nanoliter': 1e+12,\n    'kilogram/petaliter': 1e-12,\n    'kilogram/picoliter': 1e+15,\n    'kilogram/teraliter': 1.0e-09,\n    'kilogram/yoctoliter': 1e+27,\n    'kilogram/yottaliter': 1e-21,\n    'kilogram/zeptoliter': 1e+24,\n    'kilogram/zettaliter': 1e-18,\n    'kiloton/cubic foot [UK]': ((0.45359237 * 2240)*1000) / ((0.0037854118 / 231) * 1728),\n    'kiloton/cubic foot [US]': ((0.45359237 * 2000)*1000) / ((0.0037854118 / 231) * 1728),\n    'kiloton/cubic inch [UK]': ((0.45359237 * 2240)*1000) / (0.0037854118 / 231),\n    'kiloton/cubic inch [US]': ((0.45359237 * 2000)*1000) / (0.0037854118 / 231),\n    'kiloton/cubic mile [UK]': ((0.45359237 * 2240)*1000) / (((0.0037854118 / 231) * 1728 * 27) * 5451776000),\n    'kiloton/cubic mile [US]': ((0.45359237 * 2000)*1000) / (((0.0037854118 / 231) * 1728 * 27) * 5451776000),\n    'kiloton/cubic yard [UK]': ((0.45359237 * 2240)*1000) / ((0.0037854118 / 231) * 1728 * 27),\n    'kiloton/cubic yard [US]': ((0.45359237 * 2000)*1000) / ((0.0037854118 / 231) * 1728 * 27),\n    'kiloton/gallon [UK]': ((0.45359237 * 2240) * 1000) / 0.00454609,\n    'kiloton/gallon [US dry]': ((0.45359237 * 2000)*1000) / 0.0044048838,\n    'kiloton/gallon [US]': ((0.45359237 * 2000) * 1000) / 0.0037854118,\n    'kiloton/ounce [UK]': ((0.45359237 * 2240) * 1000) / (0.00454609 / 160),\n    'kiloton/ounce [US]': ((0.45359237 * 2000) * 1000) / (0.0037854118 / 128),\n    'kiloton/quart [UK]': ((0.45359237 * 2240) * 1000) / (0.00454609 / 4),\n    'kiloton/quart [US dry]': ((0.45359237 * 2000) * 1000) / (0.0044048838 / 4),\n    'kiloton/quart [US]': ((0.45359237 * 2000) * 1000) / (0.0037854118 / 4),\n    'kilotonne/attoliter': 1e+27,\n    'kilotonne/centiliter': 1e+11,\n    'kilotonne/cubic attometer': 1e+60,\n    'kilotonne/cubic centimeter': 1e+12,\n    'kilotonne/cubic decameter': 1000,\n    'kilotonne/cubic decimeter': 1.0e+09,\n    'kilotonne/cubic dekameter': 1000,\n    'kilotonne/cubic exameter': 1e-48,\n    'kilotonne/cubic femtometer': 1e+51,\n    'kilotonne/cubic gigameter': 1e-21,\n    'kilotonne/cubic hectometer': 1,\n    'kilotonne/cubic kilometer': 0.001,\n    'kilotonne/cubic megameter': 1e-12,\n    'kilotonne/cubic meter': 1.0e+06,\n    'kilotonne/cubic micrometer': 1e+24,\n    'kilotonne/cubic millimeter': 1e+15,\n    'kilotonne/cubic myriameter': 0.000001,\n    'kilotonne/cubic nanometer': 1e+33,\n    'kilotonne/cubic petameter': 1.0e-39,\n    'kilotonne/cubic picometer': 1e+42,\n    'kilotonne/cubic terameter': 1.0e-30,\n    'kilotonne/cubic yoctometer': 1e+78,\n    'kilotonne/cubic yottameter': 1e-66,\n    'kilotonne/cubic zeptometer': 1e+69,\n    'kilotonne/cubic zettameter': 1e-57,\n    'kilotonne/decaliter': 1.0e+08,\n    'kilotonne/deciliter': 1.0e+10,\n    'kilotonne/dekaliter': 1.0e+08,\n    'kilotonne/exaliter': 1.0e-09,\n    'kilotonne/femtoliter': 1e+24,\n    'kilotonne/gigaliter': 1,\n    'kilotonne/hectoliter': 1.0e+07,\n    'kilotonne/kiloliter': 1000000,\n    'kilotonne/liter': 1.0e+09,\n    'kilotonne/litre': 1.0e+09,\n    'kilotonne/megaliter': 1000,\n    'kilotonne/microliter': 1e+15,\n    'kilotonne/milliliter': 1e+12,\n    'kilotonne/myrialiter': 100000,\n    'kilotonne/nanoliter': 1e+18,\n    'kilotonne/petaliter': 0.000001,\n    'kilotonne/picoliter': 1e+21,\n    'kilotonne/teraliter': 0.001,\n    'kilotonne/yoctoliter': 1e+33,\n    'kilotonne/yottaliter': 1e-15,\n    'kilotonne/zeptoliter': 1e+30,\n    'kilotonne/zettaliter': 1e-12,\n    'megagram/attoliter': 1e+24,\n    'megagram/centiliter': 1.0e+08,\n    'megagram/cubic attometer': 1e+57,\n    'megagram/cubic centimeter': 1.0e+09,\n    'megagram/cubic decameter': 1,\n    'megagram/cubic decimeter': 1.0e+06,\n    'megagram/cubic dekameter': 1,\n    'megagram/cubic exameter': 1e-51,\n    'megagram/cubic femtometer': 1e+48,\n    'megagram/cubic gigameter': 1.0e-24,\n    'megagram/cubic hectometer': 0.001,\n    'megagram/cubic kilometer': 1.0e-06,\n    'megagram/cubic megameter': 1e-15,\n    'megagram/cubic meter': 1000,\n    'megagram/cubic micrometer': 1e+21,\n    'megagram/cubic millimeter': 1e+12,\n    'megagram/cubic myriameter': 0.000000001,\n    'megagram/cubic nanometer': 1e+30,\n    'megagram/cubic petameter': 1e-42,\n    'megagram/cubic picometer': 1e+39,\n    'megagram/cubic terameter': 1.0e-33,\n    'megagram/cubic yoctometer': 1e+75,\n    'megagram/cubic yottameter': 1e-69,\n    'megagram/cubic zeptometer': 1e+66,\n    'megagram/cubic zettameter': 1e-60,\n    'megagram/decaliter': 100000,\n    'megagram/deciliter': 1.0e+07,\n    'megagram/dekaliter': 100000,\n    'megagram/exaliter': 1e-12,\n    'megagram/femtoliter': 1e+21,\n    'megagram/gigaliter': 0.001,\n    'megagram/hectoliter': 10000,\n    'megagram/kiloliter': 1000,\n    'megagram/liter': 1000000,\n    'megagram/litre': 1000000,\n    'megagram/megaliter': 1,\n    'megagram/microliter': 1e+12,\n    'megagram/milliliter': 1.0e+09,\n    'megagram/myrialiter': 100,\n    'megagram/nanoliter': 1e+15,\n    'megagram/petaliter': 1.0e-09,\n    'megagram/picoliter': 1e+18,\n    'megagram/teraliter': 0.000001,\n    'megagram/yoctoliter': 1e+30,\n    'megagram/yottaliter': 1e-18,\n    'megagram/zeptoliter': 1e+27,\n    'megagram/zettaliter': 1e-15,\n    'megatonne/attoliter': 1e+30,\n    'megatonne/centiliter': 1e+14,\n    'megatonne/cubic attometer': 1e+63,\n    'megatonne/cubic centimeter': 1e+15,\n    'megatonne/cubic decameter': 1.0e+06,\n    'megatonne/cubic decimeter': 1e+12,\n    'megatonne/cubic dekameter': 1000000,\n    'megatonne/cubic exameter': 1.0e-45,\n    'megatonne/cubic femtometer': 1e+54,\n    'megatonne/cubic gigameter': 1e-18,\n    'megatonne/cubic hectometer': 1.0e+03,\n    'megatonne/cubic kilometer': 1,\n    'megatonne/cubic megameter': 0.000000001,\n    'megatonne/cubic meter': 1.0e+09,\n    'megatonne/cubic micrometer': 1e+27,\n    'megatonne/cubic millimeter': 1e+18,\n    'megatonne/cubic myriameter': 0.001,\n    'megatonne/cubic nanometer': 1e+36,\n    'megatonne/cubic petameter': 1e-36,\n    'megatonne/cubic picometer': 1e+45,\n    'megatonne/cubic terameter': 1e-27,\n    'megatonne/cubic yoctometer': 1e+81,\n    'megatonne/cubic yottameter': 1e-63,\n    'megatonne/cubic zeptometer': 1e+72,\n    'megatonne/cubic zettameter': 1e-54,\n    'megatonne/decaliter': 1e+11,\n    'megatonne/deciliter': 1e+13,\n    'megatonne/dekaliter': 1e+11,\n    'megatonne/exaliter': 0.000001,\n    'megatonne/femtoliter': 1e+27,\n    'megatonne/gigaliter': 1000,\n    'megatonne/hectoliter': 1.0e+10,\n    'megatonne/kiloliter': 1.0e+09,\n    'megatonne/liter': 1e+12,\n    'megatonne/litre': 1e+12,\n    'megatonne/megaliter': 1000000,\n    'megatonne/microliter': 1e+18,\n    'megatonne/milliliter': 1e+15,\n    'megatonne/myrialiter': 1.0e+08,\n    'megatonne/nanoliter': 1e+21,\n    'megatonne/petaliter': 0.001,\n    'megatonne/picoliter': 1e+24,\n    'megatonne/teraliter': 1,\n    'megatonne/yoctoliter': 1e+36,\n    'megatonne/yottaliter': 1e-12,\n    'megatonne/zeptoliter': 1e+33,\n    'megatonne/zettaliter': 1.0e-09,\n    'microgram/attoliter': 1e+12,\n    'microgram/centiliter': 0.0001,\n    'microgram/cubic attometer': 1.0e+45,\n    'microgram/cubic centimeter': 0.001,\n    'microgram/cubic decameter': 1e-12,\n    'microgram/cubic decimeter': 1.0e-06,\n    'microgram/cubic dekameter': 1e-12,\n    'microgram/cubic exameter': 1e-63,\n    'microgram/cubic femtometer': 1e+36,\n    'microgram/cubic gigameter': 1e-36,\n    'microgram/cubic hectometer': 1e-15,\n    'microgram/cubic kilometer': 1e-18,\n    'microgram/cubic megameter': 1e-27,\n    'microgram/cubic meter': 1.0e-09,\n    'microgram/cubic micrometer': 1.0e+09,\n    'microgram/cubic millimeter': 1,\n    'microgram/cubic myriameter': 1e-21,\n    'microgram/cubic nanometer': 1e+18,\n    'microgram/cubic petameter': 1e-54,\n    'microgram/cubic picometer': 1e+27,\n    'microgram/cubic terameter': 1e-45,\n    'microgram/cubic yoctometer': 1e+63,\n    'microgram/cubic yottameter': 1e-81,\n    'microgram/cubic zeptometer': 1e+54,\n    'microgram/cubic zettameter': 1e-72,\n    'microgram/decaliter': 1.0e-07,\n    'microgram/deciliter': 0.00001,\n    'microgram/dekaliter': 1.0e-07,\n    'microgram/exaliter': 1e-24,\n    'microgram/femtoliter': 1.0e+09,\n    'microgram/gigaliter': 1e-15,\n    'microgram/hectoliter': 1.0e-08,\n    'microgram/kiloliter': 1.0e-09,\n    'microgram/liter': 1.0e-06,\n    'microgram/litre': 1.0e-06,\n    'microgram/megaliter': 1e-12,\n    'microgram/microliter': 1,\n    'microgram/milliliter': 0.001,\n    'microgram/myrialiter': 1e-10,\n    'microgram/nanoliter': 1000,\n    'microgram/petaliter': 1e-21,\n    'microgram/picoliter': 1.0e+06,\n    'microgram/teraliter': 1e-18,\n    'microgram/yoctoliter': 1e+18,\n    'microgram/yottaliter': 1e-30,\n    'microgram/zeptoliter': 1e+15,\n    'microgram/zettaliter': 1e-27,\n    'milligram/attoliter': 1e+15,\n    'milligram/centiliter': 0.1,\n    'milligram/cubic attometer': 1e+48,\n    'milligram/cubic centimeter': 1,\n    'milligram/cubic decameter': 1.0e-09,\n    'milligram/cubic decimeter': 0.001,\n    'milligram/cubic dekameter': 1.0e-09,\n    'milligram/cubic exameter': 1e-60,\n    'milligram/cubic femtometer': 1.0e+39,\n    'milligram/cubic gigameter': 1e-33,\n    'milligram/cubic hectometer': 1.0e-12,\n    'milligram/cubic kilometer': 1e-15,\n    'milligram/cubic megameter': 1e-24,\n    'milligram/cubic meter': 0.000001,\n    'milligram/cubic micrometer': 1e+12,\n    'milligram/cubic millimeter': 1000,\n    'milligram/cubic myriameter': 1e-18,\n    'milligram/cubic nanometer': 1e+21,\n    'milligram/cubic petameter': 1e-51,\n    'milligram/cubic picometer': 1e+30,\n    'milligram/cubic terameter': 1e-42,\n    'milligram/cubic yoctometer': 1e+66,\n    'milligram/cubic yottameter': 1e-78,\n    'milligram/cubic zeptometer': 1e+57,\n    'milligram/cubic zettameter': 1e-69,\n    'milligram/decaliter': 0.0001,\n    'milligram/deciliter': 0.01,\n    'milligram/dekaliter': 0.0001,\n    'milligram/exaliter': 1e-21,\n    'milligram/femtoliter': 1e+12,\n    'milligram/gigaliter': 1e-12,\n    'milligram/hectoliter': 0.00001,\n    'milligram/kiloliter': 0.000001,\n    'milligram/liter': 0.001,\n    'milligram/litre': 0.001,\n    'milligram/megaliter': 1.0e-09,\n    'milligram/microliter': 1000,\n    'milligram/milliliter': 1,\n    'milligram/myrialiter': 1.0e-07,\n    'milligram/nanoliter': 1000000,\n    'milligram/petaliter': 1e-18,\n    'milligram/picoliter': 1.0e+09,\n    'milligram/teraliter': 1e-15,\n    'milligram/yoctoliter': 1e+21,\n    'milligram/yottaliter': 1e-27,\n    'milligram/zeptoliter': 1e+18,\n    'milligram/zettaliter': 1e-24,\n    'myriagram/attoliter': 1e+22,\n    'myriagram/centiliter': 1.0e+06,\n    'myriagram/cubic attometer': 1e+55,\n    'myriagram/cubic centimeter': 1.0e+07,\n    'myriagram/cubic decameter': 0.01,\n    'myriagram/cubic decimeter': 10000,\n    'myriagram/cubic dekameter': 0.01,\n    'myriagram/cubic exameter': 1e-53,\n    'myriagram/cubic femtometer': 1e+46,\n    'myriagram/cubic gigameter': 1.0e-26,\n    'myriagram/cubic hectometer': 0.00001,\n    'myriagram/cubic kilometer': 1.0e-08,\n    'myriagram/cubic megameter': 1e-17,\n    'myriagram/cubic meter': 10,\n    'myriagram/cubic micrometer': 1e+19,\n    'myriagram/cubic millimeter': 1.0e+10,\n    'myriagram/cubic myriameter': 1e-11,\n    'myriagram/cubic nanometer': 1.0e+28,\n    'myriagram/cubic petameter': 1e-44,\n    'myriagram/cubic picometer': 1e+37,\n    'myriagram/cubic terameter': 1e-35,\n    'myriagram/cubic yoctometer': 1e+73,\n    'myriagram/cubic yottameter': 1e-71,\n    'myriagram/cubic zeptometer': 1e+64,\n    'myriagram/cubic zettameter': 1e-62,\n    'myriagram/decaliter': 1000,\n    'myriagram/deciliter': 100000,\n    'myriagram/dekaliter': 1000,\n    'myriagram/exaliter': 1e-14,\n    'myriagram/femtoliter': 1e+19,\n    'myriagram/gigaliter': 0.00001,\n    'myriagram/hectoliter': 100,\n    'myriagram/kiloliter': 10,\n    'myriagram/liter': 10000,\n    'myriagram/litre': 10000,\n    'myriagram/megaliter': 0.01,\n    'myriagram/microliter': 1.0e+10,\n    'myriagram/milliliter': 1.0e+07,\n    'myriagram/myrialiter': 1,\n    'myriagram/nanoliter': 1e+13,\n    'myriagram/petaliter': 1e-11,\n    'myriagram/picoliter': 1e+16,\n    'myriagram/teraliter': 1.0e-08,\n    'myriagram/yoctoliter': 1e+28,\n    'myriagram/yottaliter': 1e-20,\n    'myriagram/zeptoliter': 1e+25,\n    'myriagram/zettaliter': 1e-17,\n    'nanogram/attoliter': 1.0e+09,\n    'nanogram/centiliter': 1.0e-07,\n    'nanogram/cubic attometer': 1.0e+42,\n    'nanogram/cubic centimeter': 1.0e-06,\n    'nanogram/cubic decameter': 1e-15,\n    'nanogram/cubic decimeter': 1.0e-09,\n    'nanogram/cubic dekameter': 1e-15,\n    'nanogram/cubic exameter': 1e-66,\n    'nanogram/cubic femtometer': 1e+33,\n    'nanogram/cubic gigameter': 1e-39,\n    'nanogram/cubic hectometer': 1e-18,\n    'nanogram/cubic kilometer': 1e-21,\n    'nanogram/cubic megameter': 1e-30,\n    'nanogram/cubic meter': 1e-12,\n    'nanogram/cubic micrometer': 1000000,\n    'nanogram/cubic millimeter': 0.001,\n    'nanogram/cubic myriameter': 1e-24,\n    'nanogram/cubic nanometer': 1e+15,\n    'nanogram/cubic petameter': 1e-57,\n    'nanogram/cubic picometer': 1e+24,\n    'nanogram/cubic terameter': 1e-48,\n    'nanogram/cubic yoctometer': 1e+60,\n    'nanogram/cubic yottameter': 1e-84,\n    'nanogram/cubic zeptometer': 1.0e+51,\n    'nanogram/cubic zettameter': 1e-75,\n    'nanogram/decaliter': 1e-10,\n    'nanogram/deciliter': 1.0e-08,\n    'nanogram/dekaliter': 1e-10,\n    'nanogram/exaliter': 1e-27,\n    'nanogram/femtoliter': 1000000,\n    'nanogram/gigaliter': 1e-18,\n    'nanogram/hectoliter': 1e-11,\n    'nanogram/kiloliter': 1e-12,\n    'nanogram/liter': 1.0e-09,\n    'nanogram/litre': 1.0e-09,\n    'nanogram/megaliter': 1e-15,\n    'nanogram/microliter': 0.001,\n    'nanogram/milliliter': 1.0e-06,\n    'nanogram/myrialiter': 1e-13,\n    'nanogram/nanoliter': 1,\n    'nanogram/petaliter': 1e-24,\n    'nanogram/picoliter': 1000,\n    'nanogram/teraliter': 1e-21,\n    'nanogram/yoctoliter': 1e+15,\n    'nanogram/yottaliter': 1e-33,\n    'nanogram/zeptoliter': 1e+12,\n    'nanogram/zettaliter': 1e-30,\n    'ounce/cubic foot': (0.45359237 / 16) / ((0.0037854118 / 231) * 1728),\n    'ounce/cubic inch': (0.45359237 / 16) / (0.0037854118 / 231),\n    'ounce/cubic mile': (0.45359237 / 16) / (((0.0037854118 / 231) * 1728 * 27) * 5451776000),\n    'ounce/cubic yard': (0.45359237 / 16) / ((0.0037854118 / 231) * 1728 * 27),\n    'ounce/gallon [UK]': (0.45359237 / 16)/0.00454609,\n    'ounce/gallon [US dry]': (0.45359237 / 16)/0.0044048838,\n    'ounce/gallon [US]': (0.45359237 / 16)/0.0037854118,\n    'ounce/ounce [UK]': (0.45359237 / 16) / (0.00454609 / 160),\n    'ounce/ounce [US]': (0.45359237 / 16) / (0.0037854118 / 128),\n    'ounce/quart [UK]': (0.45359237 / 16) / (0.00454609 / 4),\n    'ounce/quart [US dry]': (0.45359237 / 16) / (0.0044048838 / 4),\n    'ounce/quart [US]': (0.45359237 / 16) / (0.0037854118 / 4),\n    'petagram/attoliter': 1e+33,\n    'petagram/centiliter': 1e+17,\n    'petagram/cubic attometer': 1e+66,\n    'petagram/cubic centimeter': 1e+18,\n    'petagram/cubic decameter': 1000000000,\n    'petagram/cubic decimeter': 1e+15,\n    'petagram/cubic dekameter': 1.0e+09,\n    'petagram/cubic exameter': 1.0e-42,\n    'petagram/cubic femtometer': 1e+57,\n    'petagram/cubic gigameter': 1e-15,\n    'petagram/cubic hectometer': 1.0e+06,\n    'petagram/cubic kilometer': 1000,\n    'petagram/cubic megameter': 1.0e-06,\n    'petagram/cubic meter': 1e+12,\n    'petagram/cubic micrometer': 1e+30,\n    'petagram/cubic millimeter': 1e+21,\n    'petagram/cubic myriameter': 1.0e+00,\n    'petagram/cubic nanometer': 1e+39,\n    'petagram/cubic petameter': 1e-33,\n    'petagram/cubic picometer': 1e+48,\n    'petagram/cubic terameter': 1e-24,\n    'petagram/cubic yoctometer': 1e+84,\n    'petagram/cubic yottameter': 1e-60,\n    'petagram/cubic zeptometer': 1e+75,\n    'petagram/cubic zettameter': 1.0e-51,\n    'petagram/decaliter': 1e+14,\n    'petagram/deciliter': 1e+16,\n    'petagram/dekaliter': 1e+14,\n    'petagram/exaliter': 0.001,\n    'petagram/femtoliter': 1e+30,\n    'petagram/gigaliter': 1.0e+06,\n    'petagram/hectoliter': 1e+13,\n    'petagram/kiloliter': 1e+12,\n    'petagram/liter': 1e+15,\n    'petagram/litre': 1e+15,\n    'petagram/megaliter': 1.0e+09,\n    'petagram/microliter': 1e+21,\n    'petagram/milliliter': 1e+18,\n    'petagram/myrialiter': 1e+11,\n    'petagram/nanoliter': 1e+24,\n    'petagram/petaliter': 1,\n    'petagram/picoliter': 1e+27,\n    'petagram/teraliter': 1000,\n    'petagram/yoctoliter': 1e+39,\n    'petagram/yottaliter': 1.0e-09,\n    'petagram/zeptoliter': 1e+36,\n    'petagram/zettaliter': 1.0e-06,\n    'picogram/attoliter': 1.0e+06,\n    'picogram/centiliter': 1e-10,\n    'picogram/cubic attometer': 1e+39,\n    'picogram/cubic centimeter': 1.0e-09,\n    'picogram/cubic decameter': 1e-18,\n    'picogram/cubic decimeter': 1e-12,\n    'picogram/cubic dekameter': 1e-18,\n    'picogram/cubic exameter': 1e-69,\n    'picogram/cubic femtometer': 1e+30,\n    'picogram/cubic gigameter': 1e-42,\n    'picogram/cubic hectometer': 1e-21,\n    'picogram/cubic kilometer': 1e-24,\n    'picogram/cubic megameter': 1e-33,\n    'picogram/cubic meter': 1e-15,\n    'picogram/cubic micrometer': 1000,\n    'picogram/cubic millimeter': 1.0e-06,\n    'picogram/cubic myriameter': 1e-27,\n    'picogram/cubic nanometer': 1.0e+12,\n    'picogram/cubic petameter': 1e-60,\n    'picogram/cubic picometer': 1e+21,\n    'picogram/cubic terameter': 1e-51,\n    'picogram/cubic yoctometer': 1.0e+57,\n    'picogram/cubic yottameter': 1e-87,\n    'picogram/cubic zeptometer': 1.0e+48,\n    'picogram/cubic zettameter': 1e-78,\n    'picogram/decaliter': 1e-13,\n    'picogram/deciliter': 1e-11,\n    'picogram/dekaliter': 1e-13,\n    'picogram/exaliter': 1e-30,\n    'picogram/femtoliter': 1000,\n    'picogram/gigaliter': 1e-21,\n    'picogram/hectoliter': 1e-14,\n    'picogram/kiloliter': 1e-15,\n    'picogram/liter': 1e-12,\n    'picogram/litre': 1e-12,\n    'picogram/megaliter': 1e-18,\n    'picogram/microliter': 1.0e-06,\n    'picogram/milliliter': 1.0e-09,\n    'picogram/myrialiter': 1e-16,\n    'picogram/nanoliter': 0.001,\n    'picogram/petaliter': 1e-27,\n    'picogram/picoliter': 1,\n    'picogram/teraliter': 1e-24,\n    'picogram/yoctoliter': 1e+12,\n    'picogram/yottaliter': 1e-36,\n    'picogram/zeptoliter': 1.0e+09,\n    'picogram/zettaliter': 1e-33,\n    'pound/cubic foot': 0.45359237 / ((0.0037854118 / 231) * 1728),\n    'pound/cubic inch': 0.45359237 / (0.0037854118 / 231),\n    'pound/cubic mile': 0.45359237 / (((0.0037854118 / 231) * 1728 * 27) * 5451776000),\n    'pound/cubic yard': 0.45359237 / ((0.0037854118 / 231) * 1728 * 27),\n    'pound/gallon [UK]': 0.45359237/0.00454609,\n    'pound/gallon [US dry]': 0.45359237/0.0044048838,\n    'pound/gallon [US]': 0.45359237/0.0037854118,\n    'pound/ounce [UK]': 0.45359237 / (0.00454609 / 160),\n    'pound/ounce [US]': 0.45359237 / (0.0037854118 / 128),\n    'pound/quart [UK]': 0.45359237 / (0.00454609 / 4),\n    'pound/quart [US dry]': 0.45359237 / (0.0044048838 / 4),\n    'pound/quart [US]': 0.45359237 / (0.0037854118 / 4),\n    'teragram/attoliter': 1e+30,\n    'teragram/centiliter': 1e+14,\n    'teragram/cubic attometer': 1e+63,\n    'teragram/cubic centimeter': 1e+15,\n    'teragram/cubic decameter': 1.0e+06,\n    'teragram/cubic decimeter': 1e+12,\n    'teragram/cubic dekameter': 1000000,\n    'teragram/cubic exameter': 1.0e-45,\n    'teragram/cubic femtometer': 1e+54,\n    'teragram/cubic gigameter': 1e-18,\n    'teragram/cubic hectometer': 1.0e+03,\n    'teragram/cubic kilometer': 1,\n    'teragram/cubic megameter': 0.000000001,\n    'teragram/cubic meter': 1.0e+09,\n    'teragram/cubic micrometer': 1e+27,\n    'teragram/cubic millimeter': 1e+18,\n    'teragram/cubic myriameter': 0.001,\n    'teragram/cubic nanometer': 1e+36,\n    'teragram/cubic petameter': 1.0e-36,\n    'teragram/cubic picometer': 1e+45,\n    'teragram/cubic terameter': 1e-27,\n    'teragram/cubic yoctometer': 1e+81,\n    'teragram/cubic yottameter': 1e-63,\n    'teragram/cubic zeptometer': 1e+72,\n    'teragram/cubic zettameter': 1e-54,\n    'teragram/decaliter': 1e+11,\n    'teragram/deciliter': 1e+13,\n    'teragram/dekaliter': 1e+11,\n    'teragram/exaliter': 1.0e-06,\n    'teragram/femtoliter': 1e+27,\n    'teragram/gigaliter': 1000,\n    'teragram/hectoliter': 1.0e+10,\n    'teragram/kiloliter': 1.0e+09,\n    'teragram/liter': 1e+12,\n    'teragram/litre': 1e+12,\n    'teragram/megaliter': 1000000,\n    'teragram/microliter': 1e+18,\n    'teragram/milliliter': 1e+15,\n    'teragram/myrialiter': 1.0e+08,\n    'teragram/nanoliter': 1e+21,\n    'teragram/petaliter': 0.001,\n    'teragram/picoliter': 1e+24,\n    'teragram/teraliter': 1,\n    'teragram/yoctoliter': 1e+36,\n    'teragram/yottaliter': 1e-12,\n    'teragram/zeptoliter': 1e+33,\n    'teragram/zettaliter': 1.0e-09,\n    'tonne/attoliter': 1e+24,\n    'tonne/centiliter': 1.0e+08,\n    'tonne/cubic attometer': 1e+57,\n    'tonne/cubic centimeter': 1.0e+09,\n    'tonne/cubic decameter': 1,\n    'tonne/cubic decimeter': 1.0e+06,\n    'tonne/cubic dekameter': 1,\n    'tonne/cubic exameter': 1e-51,\n    'tonne/cubic femtometer': 1e+48,\n    'tonne/cubic gigameter': 1.0e-24,\n    'tonne/cubic hectometer': 0.001,\n    'tonne/cubic kilometer': 1.0e-06,\n    'tonne/cubic megameter': 1e-15,\n    'tonne/cubic meter': 1000,\n    'tonne/cubic micrometer': 1e+21,\n    'tonne/cubic millimeter': 1e+12,\n    'tonne/cubic myriameter': 0.000000001,\n    'tonne/cubic nanometer': 1e+30,\n    'tonne/cubic petameter': 1e-42,\n    'tonne/cubic picometer': 1e+39,\n    'tonne/cubic terameter': 1.0e-33,\n    'tonne/cubic yoctometer': 1e+75,\n    'tonne/cubic yottameter': 1e-69,\n    'tonne/cubic zeptometer': 1e+66,\n    'tonne/cubic zettameter': 1e-60,\n    'tonne/decaliter': 100000,\n    'tonne/deciliter': 1.0e+07,\n    'tonne/dekaliter': 100000,\n    'tonne/exaliter': 1e-12,\n    'tonne/femtoliter': 1e+21,\n    'tonne/gigaliter': 0.001,\n    'tonne/hectoliter': 10000,\n    'tonne/kiloliter': 1000,\n    'tonne/liter': 1000000,\n    'tonne/litre': 1000000,\n    'tonne/megaliter': 1,\n    'tonne/microliter': 1e+12,\n    'tonne/milliliter': 1.0e+09,\n    'tonne/myrialiter': 100,\n    'tonne/nanoliter': 1e+15,\n    'tonne/petaliter': 1.0e-09,\n    'tonne/picoliter': 1e+18,\n    'tonne/teraliter': 1.0e-06,\n    'tonne/yoctoliter': 1e+30,\n    'tonne/yottaliter': 1e-18,\n    'tonne/zeptoliter': 1e+27,\n    'tonne/zettaliter': 1e-15,\n    'yoctogram/attoliter': 1.0e-06,\n    'yoctogram/centiliter': 1e-22,\n    'yoctogram/cubic attometer': 1.0e+27,\n    'yoctogram/cubic centimeter': 1e-21,\n    'yoctogram/cubic decameter': 1e-30,\n    'yoctogram/cubic decimeter': 1e-24,\n    'yoctogram/cubic dekameter': 1e-30,\n    'yoctogram/cubic exameter': 1e-81,\n    'yoctogram/cubic femtometer': 1e+18,\n    'yoctogram/cubic gigameter': 1e-54,\n    'yoctogram/cubic hectometer': 1e-33,\n    'yoctogram/cubic kilometer': 1e-36,\n    'yoctogram/cubic megameter': 1e-45,\n    'yoctogram/cubic meter': 1e-27,\n    'yoctogram/cubic micrometer': 1.0e-09,\n    'yoctogram/cubic millimeter': 1e-18,\n    'yoctogram/cubic myriameter': 1e-39,\n    'yoctogram/cubic nanometer': 1,\n    'yoctogram/cubic petameter': 1e-72,\n    'yoctogram/cubic picometer': 1000000000,\n    'yoctogram/cubic terameter': 1e-63,\n    'yoctogram/cubic yoctometer': 1e+45,\n    'yoctogram/cubic yottameter': 1e-99,\n    'yoctogram/cubic zeptometer': 1.0e+36,\n    'yoctogram/cubic zettameter': 1e-90,\n    'yoctogram/decaliter': 1e-25,\n    'yoctogram/deciliter': 1e-23,\n    'yoctogram/dekaliter': 1e-25,\n    'yoctogram/exaliter': 1e-42,\n    'yoctogram/femtoliter': 1.0e-09,\n    'yoctogram/gigaliter': 1e-33,\n    'yoctogram/hectoliter': 1e-26,\n    'yoctogram/kiloliter': 1e-27,\n    'yoctogram/liter': 1e-24,\n    'yoctogram/litre': 1e-24,\n    'yoctogram/megaliter': 1e-30,\n    'yoctogram/microliter': 1e-18,\n    'yoctogram/milliliter': 1e-21,\n    'yoctogram/myrialiter': 1e-28,\n    'yoctogram/nanoliter': 1e-15,\n    'yoctogram/petaliter': 1e-39,\n    'yoctogram/picoliter': 1e-12,\n    'yoctogram/teraliter': 1e-36,\n    'yoctogram/yoctoliter': 1,\n    'yoctogram/yottaliter': 1e-48,\n    'yoctogram/zeptoliter': 0.001,\n    'yoctogram/zettaliter': 1e-45,\n    'yottagram/attoliter': 1e+42,\n    'yottagram/centiliter': 1e+26,\n    'yottagram/cubic attometer': 1e+75,\n    'yottagram/cubic centimeter': 1e+27,\n    'yottagram/cubic decameter': 1e+18,\n    'yottagram/cubic decimeter': 1e+24,\n    'yottagram/cubic dekameter': 1e+18,\n    'yottagram/cubic exameter': 1e-33,\n    'yottagram/cubic femtometer': 1e+66,\n    'yottagram/cubic gigameter': 0.000001,\n    'yottagram/cubic hectometer': 1e+15,\n    'yottagram/cubic kilometer': 1e+12,\n    'yottagram/cubic megameter': 1000,\n    'yottagram/cubic meter': 1e+21,\n    'yottagram/cubic micrometer': 1e+39,\n    'yottagram/cubic millimeter': 1e+30,\n    'yottagram/cubic myriameter': 1000000000,\n    'yottagram/cubic nanometer': 1e+48,\n    'yottagram/cubic petameter': 1e-24,\n    'yottagram/cubic picometer': 1e+57,\n    'yottagram/cubic terameter': 1.0e-15,\n    'yottagram/cubic yoctometer': 1e+93,\n    'yottagram/cubic yottameter': 1e-51,\n    'yottagram/cubic zeptometer': 1e+84,\n    'yottagram/cubic zettameter': 1e-42,\n    'yottagram/decaliter': 1e+23,\n    'yottagram/deciliter': 1e+25,\n    'yottagram/dekaliter': 1e+23,\n    'yottagram/exaliter': 1000000,\n    'yottagram/femtoliter': 1e+39,\n    'yottagram/gigaliter': 1e+15,\n    'yottagram/hectoliter': 1e+22,\n    'yottagram/kiloliter': 1e+21,\n    'yottagram/liter': 1e+24,\n    'yottagram/litre': 1e+24,\n    'yottagram/megaliter': 1e+18,\n    'yottagram/microliter': 1e+30,\n    'yottagram/milliliter': 1e+27,\n    'yottagram/myrialiter': 1e+20,\n    'yottagram/nanoliter': 1e+33,\n    'yottagram/petaliter': 1.0e+09,\n    'yottagram/picoliter': 1e+36,\n    'yottagram/teraliter': 1e+12,\n    'yottagram/yoctoliter': 1e+48,\n    'yottagram/yottaliter': 1,\n    'yottagram/zeptoliter': 1e+45,\n    'yottagram/zettaliter': 1000,\n    'zeptogram/attoliter': 0.001,\n    'zeptogram/centiliter': 1e-19,\n    'zeptogram/cubic attometer': 1.0e+30,\n    'zeptogram/cubic centimeter': 1e-18,\n    'zeptogram/cubic decameter': 1e-27,\n    'zeptogram/cubic decimeter': 1e-21,\n    'zeptogram/cubic dekameter': 1e-27,\n    'zeptogram/cubic exameter': 1e-78,\n    'zeptogram/cubic femtometer': 1.0e+21,\n    'zeptogram/cubic gigameter': 1e-51,\n    'zeptogram/cubic hectometer': 1e-30,\n    'zeptogram/cubic kilometer': 1e-33,\n    'zeptogram/cubic megameter': 1e-42,\n    'zeptogram/cubic meter': 1e-24,\n    'zeptogram/cubic micrometer': 1.0e-06,\n    'zeptogram/cubic millimeter': 1e-15,\n    'zeptogram/cubic myriameter': 1e-36,\n    'zeptogram/cubic nanometer': 1000,\n    'zeptogram/cubic petameter': 1e-69,\n    'zeptogram/cubic picometer': 1e+12,\n    'zeptogram/cubic terameter': 1e-60,\n    'zeptogram/cubic yoctometer': 1e+48,\n    'zeptogram/cubic yottameter': 1e-96,\n    'zeptogram/cubic zeptometer': 1e+39,\n    'zeptogram/cubic zettameter': 1e-87,\n    'zeptogram/decaliter': 1e-22,\n    'zeptogram/deciliter': 1e-20,\n    'zeptogram/dekaliter': 1e-22,\n    'zeptogram/exaliter': 1e-39,\n    'zeptogram/femtoliter': 1.0e-06,\n    'zeptogram/gigaliter': 1e-30,\n    'zeptogram/hectoliter': 1e-23,\n    'zeptogram/kiloliter': 1e-24,\n    'zeptogram/liter': 1e-21,\n    'zeptogram/litre': 1e-21,\n    'zeptogram/megaliter': 1e-27,\n    'zeptogram/microliter': 1e-15,\n    'zeptogram/milliliter': 1e-18,\n    'zeptogram/myrialiter': 1e-25,\n    'zeptogram/nanoliter': 1e-12,\n    'zeptogram/petaliter': 1e-36,\n    'zeptogram/picoliter': 1.0e-09,\n    'zeptogram/teraliter': 1e-33,\n    'zeptogram/yoctoliter': 1000,\n    'zeptogram/yottaliter': 1e-45,\n    'zeptogram/zeptoliter': 1,\n    'zeptogram/zettaliter': 1e-42,\n    'zettagram/attoliter': 1e+39,\n    'zettagram/centiliter': 1e+23,\n    'zettagram/cubic attometer': 1e+72,\n    'zettagram/cubic centimeter': 1e+24,\n    'zettagram/cubic decameter': 1e+15,\n    'zettagram/cubic decimeter': 1e+21,\n    'zettagram/cubic dekameter': 1e+15,\n    'zettagram/cubic exameter': 1e-36,\n    'zettagram/cubic femtometer': 1e+63,\n    'zettagram/cubic gigameter': 1.0e-09,\n    'zettagram/cubic hectometer': 1e+12,\n    'zettagram/cubic kilometer': 1.0e+09,\n    'zettagram/cubic megameter': 1,\n    'zettagram/cubic meter': 1e+18,\n    'zettagram/cubic micrometer': 1e+36,\n    'zettagram/cubic millimeter': 1e+27,\n    'zettagram/cubic myriameter': 1000000,\n    'zettagram/cubic nanometer': 1e+45,\n    'zettagram/cubic petameter': 1e-27,\n    'zettagram/cubic picometer': 1e+54,\n    'zettagram/cubic terameter': 1.0e-18,\n    'zettagram/cubic yoctometer': 1e+90,\n    'zettagram/cubic yottameter': 1.0e-54,\n    'zettagram/cubic zeptometer': 1e+81,\n    'zettagram/cubic zettameter': 1e-45,\n    'zettagram/decaliter': 1e+20,\n    'zettagram/deciliter': 1e+22,\n    'zettagram/dekaliter': 1e+20,\n    'zettagram/exaliter': 1000,\n    'zettagram/femtoliter': 1e+36,\n    'zettagram/gigaliter': 1e+12,\n    'zettagram/hectoliter': 1e+19,\n    'zettagram/kiloliter': 1e+18,\n    'zettagram/liter': 1e+21,\n    'zettagram/litre': 1e+21,\n    'zettagram/megaliter': 1e+15,\n    'zettagram/microliter': 1e+27,\n    'zettagram/milliliter': 1e+24,\n    'zettagram/myrialiter': 1e+17,\n    'zettagram/nanoliter': 1e+30,\n    'zettagram/petaliter': 1.0e+06,\n    'zettagram/picoliter': 1e+33,\n    'zettagram/teraliter': 1.0e+09,\n    'zettagram/yoctoliter': 1e+45,\n    'zettagram/yottaliter': 0.001,\n    'zettagram/zeptoliter': 1e+42,\n    'zettagram/zettaliter': 1\n  }\n};\n","module.exports = {\n  name: 'distance',\n  conversion: {\n    params: {\n      surface: 'area',\n      length: 'distance',\n      initialVelocity: 'velocity',\n      velocity: 'velocity',\n      time: 'time'\n    },\n    converters: {\n      squareWidth(params) {\n        return Math.sqrt(params.surface);\n      },\n      rectangleWidth(params) {\n        return params.surface / params.length;\n      },\n      velocityAndTime(params) {\n        return (params.initialVelocity + params.velocity) * params.time / 2;\n      }\n    }\n  },\n  base: 'meter',\n  aliases: {\n    'in': 'inch [international, U.S.]',\n    'ft': 'feet [international, U.S.]',\n    'yd': 'yard',\n    'm': 'meter',\n    'km': 'kilometer',\n    'inch': 'inch [international, U.S.]',\n    'foot': 'foot [international, U.S.]',\n    'feet': 'feet [international, U.S.]',\n    'mile': 'mile [international]'\n  },\n  units: {\n    'agate [Adobe]': (0.3048 / 12) / 72,\n    'alen [Danish]': 0.6277,\n    'alen [Scandinavia]': 0.6,\n    'alen [Swedish]': 0.5938,\n    'angstrom': 1e-10,\n    'arms-length': 0.70,\n    'arpent [Canada]': 58.47,\n    'arpent [France]': 58.471308,\n    'arsheen [Russia]': 0.7112,\n    'arshin [iran]': 1.04,\n    'arshin [iraq]': 74.5,\n    'astronomical unit': 149597870691,\n    'attometer': 1e-18,\n    'bamboo': 3.2,\n    'barleycorn': 0.0085,\n    'bee space': 0.0065,\n    'bicron': 1e-12,\n    'block [East U.S.]': (0.3048 * 5280) / 20,\n    'block [Midwest U.S.]': (0.3048 * 5280) / 16,\n    'block [South, West U.S.]': (0.3048 * 5280) / 10,\n    'bohr': 52.918e-12,\n    'braccio [Italy]': 0.70,\n    'braza [Argentina]': 1.733,\n    'braza [Spain]': 1.67,\n    'braza [Texas]': 1.693,\n    'button measure': 0.000635,\n    'cable [U.S.]': 720 * 0.3048,\n    'cable [British]': 608 * 0.3048,\n    'caliber': 0.3048 / 12,\n    'cana (canna, canne)': 2,\n    'cape foot': 0.314858,\n    'cape inch': 0.314858 / 12,\n    'cape rood': 3.778296,\n    'centimeter': 0.01,\n    'chain [Gunter, survey]': 66 * (1200 / 3937),\n    'chain [Ramsden, engineer]': 100 * 0.3048,\n    'ch\\'ih [China]': 0.35814,\n    'chinese foot': 0.371475,\n    'chinese inch': 0.0371475,\n    'chinese mile': 557.21,\n    'chinese yard': 0.89154,\n    'city block [East U.S.]': (0.3048 * 5280) / 20,\n    'city block [Midwest U.S.]': (0.3048 * 5280) / 16,\n    'city block [South, West U.S.]': (0.3048 * 5280) / 10,\n    'click [U.S. military]': 1000,\n    'cuadra': 84,\n    'cuadra [Argentina]': 130,\n    'cubit [Egyptian]': 0.45,\n    'cubit [Royal Egyptian]': 0.5235,\n    'cubit [English]': 0.4572,\n    'cubit [Roman]': 0.444,\n    'cuerda': 21,\n    'decimeter': 0.10,\n    'dekameter': 10,\n    'didot point': 0.000377,\n    'digit': 0.019,\n    'diraa [Egypt]': 0.58,\n    'dong [Vietnam]': (2 + (1 / 3)) / 100,\n    'douzi√®me [watchmaking]': 0.000188,\n    'douzi√®me [print]': 0.00017638888889,\n    'dra [Iraq]': 0.745,\n    'dra [Russia]': 0.7112,\n    'el [Dutch]': 0.69,\n    'ell [English]': 1.143,\n    'ell [Scotland]': 0.945,\n    'elle [Germany]': 0.6,\n    'elle [Vienna]': 0.7793,\n    'em': 0.0042175176,\n    'estadio [Portugal]': 261,\n    'estadio [Spain]': 174,\n    'exameter': 1e+18,\n    'faden [Austria]': 1.8965,\n    'faden [Switzerland]': 1.8,\n    'fall [English]': 6.858,\n    'fall [Scotland]': 5.67,\n    'fathom': 6 * 0.3048,\n    'fathom [ancient]': 1.829,\n    'faust [Hungary]': 0.10536,\n    'feet [pre-1963 Canada]': 0.325,\n    'feet [Egypt]': 0.36,\n    'feet [France]': 0.3248406,\n    'feet [international, U.S.]': 0.3048,\n    'feet [iraq]': 0.316,\n    'feet [Netherlands]': 0.28313,\n    'feet [Rome]': 0.296,\n    'feet [survey]': 1200 / 3937,\n    'femtometer': 1e-15,\n    'fermi': 1e-15,\n    'finger': (0.3048 / 12) * 4.5,\n    'fingerbreadth': (0.3048 / 12) * 0.75,\n    'fist': 0.1,\n    'fod': 0.3141,\n    'foot [Egypt]': 0.36,\n    'foot [France]': 0.3248406,\n    'foot [international, U.S.]': 0.3048,\n    'foot [iraq]': 0.316,\n    'foot [Netherlands]': 0.28313,\n    'foot [Rome]': 0.296,\n    'foot [survey]': 1200 / 3937,\n    'football field [Canada]': 100.584,\n    'football field [U.S.]': 91.44,\n    'football field [U.S., complete]': 0.9144 * 120,\n    'furlong [international]': 0.3048 * 660,\n    'furlong [survey]': (1200 / 3937) * 660,\n    'fuss [German]': 0.31608,\n    'gigameter': 1e+9,\n    'gigaparsec': 30.85678e+24,\n    'gnat\\'s eye': 0.000125,\n    'goad': 1.3716,\n    'gry': 0.000211667,\n    'hair\\'s breadth': 0.0001,\n    'hand [non-equine]': 0.1016,\n    'handbreadth': 0.08,\n    'hat [Cambodia]': 0.5,\n    'hectometer': 100,\n    'heer': 73.152,\n    'hiro [Japan]': 6 * 0.303,\n    'hubble': 9.4605e+24,\n    'hvat [Croatia]': 1.8965,\n    'inch [international, U.S.]': 0.3048 / 12,\n    'iron': (0.3048 / 12) / 48,\n    'ken [Japan]': 6 * 0.303,\n    'kerat': 0.0286,\n    'kilofoot': 304.8,\n    'kilometer': 1000,\n    'kiloparsec': 3.0856776e+19,\n    'kiloyard': 914.4,\n    'kind': 0.5,\n    'klafter [Austria]': 1.8965,\n    'klafter [Switzerland]': 1.8,\n    'klick': 1000,\n    'kyu': 0.00025,\n    'lap [old]': 402.336,\n    'lap [competition]': 400,\n    'lap [olympic pool]': 100,\n    'league [ancient Celtic]': 2275,\n    'league [nautical]': 5556,\n    'league [UK nautical]': 5559.552,\n    'league [UK]': 4828,\n    'league [US statute]': 4828.0417,\n    'leap': 2.0574,\n    'legoa': 6174.1,\n    'legua': 4200,\n    'legua [Texas]': 4233.4,\n    'legua [Spanish, pre-1568]': 4179.4,\n    'legua [Spanish, post-1568]': 6680,\n    'li [ancient China]': 500,\n    'li [imperial China]': 644.65,\n    'li [modern China]': 500,\n    'lieue [France]': 3898,\n    'lieue [France, metric]': 4000,\n    'lieue [France, nautical]': 5556,\n    'light second': 299792458,\n    'light minute': 299792458 * 60,\n    'light hour': 299792458 * 60 * 60,\n    'light day': 299792458 * 60 * 60 * 24,\n    'light year [Julian]': 299792458 * 60 * 60 * 24 * 365.25,\n    'light year [tropical]': 299792458 * 31556925.9747,\n    'light year [traditional]': 299792458 * 60 * 60 * 24 * 365,\n    'ligne [France]': 0.0021167,\n    'ligne [Swiss]': 0.002256,\n    'line': 0.0021167,\n    'line [small]': 0.000635,\n    'link [Gunter, survey]': 0.66* (1200 / 3937),\n    'link [Ramden, engineer]': 0.3048,\n    'lug': 5.0292,\n    'lug [great]': 6.4008,\n    'marathon': 42194.988,\n    'mark twain': 3.6576074,\n    'megameter': 1000000,\n    'megaparsec': 3.0856776e+22,\n    'meile [Austria]': 7586,\n    'meile [geographische]': 7412.7,\n    'meile [North Germany]': 7532.5,\n    'meter': 1,\n    'metre': 1,\n    'metric mile': 1500,\n    'metric mile [high school]': 1600,\n    'microinch': 2.54e-08,\n    'micrometer': 0.000001,\n    'micromicron': 1e-12,\n    'micron': 0.000001,\n    'miglio': 1488.6,\n    'miil (mijl) [Danish]': 7500,\n    'miil (mijl) [Denmark]': 7532.5,\n    'miil (mijl) [Sweden, ancient]': 10687,\n    'mil': 0.0000254,\n    'mil [Sweden]': 10000,\n    'mile [Britain, ancient]': 1609,\n    'mile [Irish]': 2048,\n    'mile [international]': 1609.344,\n    'mile [nautical, international]': 1852,\n    'mile [nautical, UK]': 0.3048 * 6080,\n    'mile [nautical, US]': 1852,\n    'mile [Roman, ancient]': 1520,\n    'mile [Scottish]': 1814,\n    'mile [statute]': 1609.344,\n    'mile [survey, US]': (1200 / 3937) * 5280,\n    'milha [Portuguese]': 2087.3,\n    'military pace': 0.762,\n    'military pace [double time]': 0.9144,\n    'milla [Spanish]': 1392,\n    'mille [French]': 1949,\n    'milliare [Rome]': 0.001478,\n    'millimeter': 0.001,\n    'millimicron': 1e-9,\n    'mkono [Africa]': 0.4572,\n    'moot [India]': 0.0762,\n    'myriameter': 10000,\n    'nail': 0.05715,\n    'nanometer': 1e-9,\n    'nanon': 1e-9,\n    'pace [great]': 1.524,\n    'pace [Roman]': 1.48,\n    'palm [Dutch]': 0.10,\n    'palm [Britain, Roman minor]': 0.075,\n    'palm [US, Roman major]': 0.2286,\n    'palmo [Portuguese]': 0.22,\n    'palmo [Spanish]': 0.20,\n    'palmo [Texas]': 0.2117,\n    'parasang': 6000,\n    'Paris foot': 0.3248406,\n    'parsec': 149597870691 * 206264.8,\n    'pe [Portuguese]': 0.33324,\n    'pearl': 0.001757299,\n    'perch': 5.0292,\n    'perch [Ireland]': 6.4008,\n    'pertica': 2.96,\n    'pes': 0.2967,\n    'petameter': 1e+15,\n    'pica': 0.0042175176,\n    'picometer': 1e-12,\n    'pie [Argentina]': 0.2889,\n    'pie [Italian]': 0.298,\n    'pie [Spanish]': 0.2786,\n    'pie [Texas]': 0.2822,\n    'pied de roi': 0.3248406,\n    'pik': 0.71,\n    'pike [Greece]': 0.71,\n    'point [Adobe]': (0.3048 / 12) / 72,\n    'point [Britain, US]': 0.00035,\n    'point [Didot]': 0.000377,\n    'point [TeX]': 0.0003514598035,\n    'pole': 5.0292,\n    'polegada [Portuguese]': 0.02777,\n    'pouce': 0.02707,\n    'pu [China]': 1.7907,\n    'pulgada': 0.02365,\n    'pygme [Greece]': 0.346,\n    'Q': 0.00025,\n    'quadrant': 10001300,\n    'quarter': 402.336,\n    'quarter [cloth]': 0.2286,\n    'quarter [print]': 0.00025,\n    'range': (1200 / 3937) * 31680,\n    'reed [Israel]': 2.679,\n    'ri [Japan]': 3927,\n    'ridge': 6.1722,\n    'river [Egypt]': 2000,\n    'Robie': 0.001 * 25,\n    'rod [international]': 5.0292,\n    'rod [survey]': (1200 / 3937) * 16.5,\n    'roede': 10,\n    'rood': 3.7783,\n    'rope': 3.7783,\n    'royal foot': 0.3248406,\n    'rute [Germany]': 3.75,\n    'sadzhen': 2.1336,\n    'sagene': 2.1336,\n    'Scots foot': 0.30645,\n    'Scots mile': 1814.2,\n    'seemeile': 1852,\n    'shackle': 27.432,\n    'shaftment': 0.15124,\n    'shaftment [ancient]': 0.165,\n    'shaku [Japan]': 0.303,\n    'siriometer': 1.4959787e+17,\n    'smoot': 1.7018,\n    'span': 0.2286,\n    'spat': 1e+12,\n    'stadium': 185,\n    'step': 0.762,\n    'stick': 3.048,\n    'story': 3.3,\n    'stride [great]': 1.524,\n    'stride [Roman]': 1.48,\n    'tenthmeter': 1e-10,\n    'terameter': 1e+12,\n    'thou': 0.0000254,\n    'toise': 1.949,\n    'township': (1200 / 3937) * 31680,\n    't\\'sun': 0.0358,\n    'tu': 161130,\n    'twain': 3.6576074,\n    'twip': 0.000017639,\n    'U': 0.04445,\n    'vara [California]': 0.83820168,\n    'vara [Mexico]': 0.83802,\n    'vara [Portuguese]': 1.10,\n    'vara [South America]': 0.864,\n    'vara [Spanish]': 0.83587,\n    'vara [Texas]': 0.84666836,\n    'verge': 0.9144,\n    'vershok': 0.04445,\n    'verst': 1066.8,\n    'wah [Thailand]': 2,\n    'werst': 1066.8,\n    'X unit': 1.0020722e-13,\n    'yard': 0.9144,\n    'yoctometer': 1e-24,\n    'yottameter': 1e+24,\n    'zeptometer': 1e-21,\n    'zettameter': 1e+21,\n    'zoll [Germany]': 0.02634,\n    'zoll [Switzerland]': 0.03\n  }\n};\n","module.exports = {\n  name: 'electric capacitance',\n  //conversion: {},\n  base: 'farad [SI standard]',\n  aliases: {\n    'farad': 'farad [SI standard]'\n  },\n  units: {\n    'abfarad': 1000000000,\n    'centifarad': 0.01,\n    'coulomb/volt': 1,\n    'decifarad': 0.1,\n    'dekafarad': 10,\n    'electromagnetic unit': 1000000000,\n    'electrostatic unit': 1.11265e-12,\n    'farad [SI standard]': 1,\n    'gaussian': 1.11265e-12,\n    'gigafarad': 1000000000,\n    'hectofarad': 100,\n    'jar': 1.111111111111111e-9,\n    'kilofarad': 1000,\n    'megafarad': 1000000,\n    'microfarad': 0.000001,\n    'millifarad': 0.001,\n    'nanofarad': 1e-9,\n    'picofarad': 1e-12,\n    'puff': 1e-12,\n    'second/ohm': 1,\n    'statfarad': 1.11265e-12,\n    'terafarad': 1000000000000,\n    'farad [international]': 0.99951\n  }\n};\n","module.exports = {\n  name: 'electric current',\n  //conversion: {},\n  base: 'amp',\n  //aliases: { },\n  units: {\n    'abampere': 10,\n    'ampere': 1,\n    'amp': 1,\n    'biot': 10,\n    'centiampere': 0.01,\n    'coulomb/second': 1,\n    'deciampere': 0.1,\n    'dekaampere': 10,\n    'electromagnetic unit of current': 10,\n    'electrostatic unit of current': 3.335641e-10,\n    'franklin/second': 3.335641e-10,\n    'gaussian electric current': 3.335641e-10,\n    'gigaampere': 1e+9,\n    'gilbert': 0.79577472,\n    'hectoampere': 100,\n    'kiloampere': 1000,\n    'megaampere': 1000000,\n    'microampere': 0.000001,\n    'milliampere': 0.001,\n    'milliamp': 0.001,\n    'nanoampere': 1e-9,\n    'picoampere': 1e-12,\n    'siemens volt': 1,\n    'statampere': 3.335641e-10,\n    'teraampere': 1e+12,\n    'volt/ohm': 1,\n    'watt/volt': 1,\n    'weber/henry': 1\n  }\n};\n","module.exports = {\n  name: 'energy',\n  //conversion: {},\n  base: 'joule',\n  //aliases: { },\n  units: {\n    'attojoule': 1.e-18,\n    'Board of Trade unit': 3600000,\n    'Btu': 1055.0559,\n    'Btu [thermochemical]': 1054.3503,\n    'calorie [I.T.]': 4.1868,\n    'calorie [15¬∞ C]': 4.1858,\n    'Calorie [nutritional]': 4186.8,\n    'calorie [thermochemical]': 4.184,\n    'celsius heat unit': 1899.1005,\n    'centijoule': 0.01,\n    'cheval vapeur heure': 2647795.5,\n    'decijoule': 0.1,\n    'dekajoule': 10,\n    'dekawatt hour': 36000,\n    'dekatherm': 1.055057e+9,\n    'electronvolt': 1.6021773e-19,\n    'erg': 0.0000001,\n    'exajoule': 1.e+18,\n    'exawatt hour': 3.6e+21,\n    'femtojoule': 1.e-15,\n    'foot pound': 1.3558179,\n    'foot poundal': 0.04214011,\n    'gallon [UK] of automotive gasoline': 1.3176e+8 * 1.20095,\n    'gallon [U.S.] of automotive gasoline': 1.3176e+8,\n    'gallon [UK] of aviation gasoline': 1.3176e+8*1.20095,\n    'gallon [U.S.] of aviation gasoline': 1.3176e+8,\n    'gallon [UK] of diesel oil': 1.4652e+8*1.20095,\n    'gallon [U.S.] of diesel oil': 1.4652e+8,\n    'gallon [UK] of distilate #2 fuel oil': 1.4652e+8*1.20095,\n    'gallon [U.S.] of distilate #2 fuel oil': 1.4652e+8,\n    'gallon [UK] of kerosene type jet fuel': 1.422e+8*1.20095,\n    'gallon [U.S.] of kerosene type jet fuel': 1.422e+8,\n    'gallon [UK] of LPG': 100757838.45*1.20095,\n    'gallon [U.S.] of LPG': 100757838.45,\n    'gallon [UK] of naphtha type jet fuel': 1.3392e+8*1.20095,\n    'gallon [U.S.] of naphtha type jet fuel': 1.3392e+8,\n    'gallon [UK] of kerosene': 1.422e+8*1.20095,\n    'gallon [U.S.] of kerosene': 1.422e+8,\n    'gallon [UK] of residual fuel oil': 1.5804e+8*1.20095,\n    'gallon [U.S.] of residual fuel oil': 1.5804e+8,\n    'gigaelectronvolt': 1.6021773e-10,\n    'gigacalorie [I.T.]': 4186800000,\n    'gigacalorie [15¬∞ C]': 4185800000,\n    'gigajoule': 1.e+9,\n    'gigawatt hour': 3.6e+12,\n    'gram calorie': 4.1858,\n    'hartree': 4.3597482e-18,\n    'hectojoule': 100,\n    'hectowatt hour': 360000,\n    'horsepower hour': 2684519.5,\n    'hundred cubic foot of natural gas': 108720000,\n    'inch ounce': 0.0070615518,\n    'inch pound': 0.112984825,\n    'joule': 1,\n    'kilocalorie [15¬∞ C]': 4185.8,\n    'kilocalorie [I.T.]': 4186.8,\n    'kilocalorie [thermochemical]': 4184,\n    'kiloelectronvolt': 1.6021773e-16,\n    'kilogram calorie': 4185.8,\n    'kilogram-force meter': 9.80665,\n    'kilojoule': 1000,\n    'kilopond meter': 9.80665,\n    'kiloton [explosive]': 4.184e+12,\n    'kilowatt hour': 3600000,\n    'liter atmosphere': 101.325,\n    'megaelectronvolt': 1.6021773e-13,\n    'megacalorie [I.T.]': 4186800,\n    'megacalorie [15¬∞ C]': 4185800,\n    'megajoule': 1000000,\n    'megalerg': 0.1,\n    'megaton [explosive]': 4.184e+15,\n    'megawatthour': 3.6e+9,\n    'meter kilogram-force': 9.80665,\n    'microjoule': 0.000001,\n    'millijoule': 0.001,\n    'myriawatt hour': 3.6e+7,\n    'nanojoule': 1.e-9,\n    'newton meter': 1,\n    'petajoule': 1.e+15,\n    'petawatthour': 3.6e+18,\n    'pferdest√§rkenstunde': 2647795.5,\n    'picojoule': 1.e-12,\n    'Q unit': 1.0550559e+21,\n    'quad': 1.0550559e+18,\n    'teraelectronvolt': 1.6021773e-7,\n    'terajoule': 1.e+12,\n    'terawatthour': 3.6e+15,\n    'therm [Europe]': 1.0550559e+8,\n    'therm [U.S. (uncommon)]': 1.054804e+8,\n    'thermie': 4185800,\n    'ton [explosive]': 4.184e+9,\n    'tonne of coal equivalent': 2.93076e+10,\n    'tonne of oil equivalent': 4.1868e+10,\n    'watthour': 3600,\n    'wattsecond': 1,\n    'yoctojoule': 1.e-24,\n    'yottajoule': 1.e+24,\n    'yottawatthour': 3.6e+27,\n    'zeptojoule': 1.e-21,\n    'zettajoule': 1.e+21,\n    'zettawatthour': 3.6e+24\n  }\n};\n","module.exports = {\n  name: 'flow rate [mole]',\n  //conversion: {},\n  base: 'mole/second',\n  //aliases: { },\n  units: {\n    'centimole/day': 0.01 / 60 / 60 / 24,\n    'centimole/hour': 0.01 / 60 / 60,\n    'centimole/minute': 0.01 / 60,\n    'centimole/second': 0.01,\n    'megamole/day': 1000000 / 60 / 60 / 24,\n    'megamole/hour': 1000000 / 60 / 60,\n    'megamole/minute': 1000000 / 60,\n    'megamole/second': 1000000,\n    'micromole/day': 0.000001 / 60 / 60 / 24,\n    'micromole/hour': 0.000001 / 60 / 60,\n    'micromole/minute': 0.000001 / 60,\n    'micromole/second': 0.000001,\n    'millimole/day': 0.001 / 60 / 60 / 24,\n    'millimole/hour': 0.001 / 60 / 60,\n    'millimole/minute': 0.001 / 60,\n    'millimole/second': 0.001,\n    'mole/day': 1 / 60 / 60 / 24,\n    'mole/hour': 1 / 60 / 60,\n    'mole/minute': 1 / 60,\n    'mole/second': 1\n  }\n};\n","module.exports = {\n  name: 'flow rate [volume]',\n  //conversion: {},\n  base: 'cubic meter/second',\n  //aliases: { },\n  units: {\n    'acre foot/day': 1233.48184 / 60 / 60 / 24,\n    'acre foot/hour': 1233.48184 / 60 / 60,\n    'acre foot/minute': 1233.48184 / 60,\n    'acre foot/second': 1233.48184,\n    'acre foot/day [survey]': 1233.48924 / 60 / 60 / 24,\n    'acre foot/hour [survey]': 1233.48924 / 60 / 60,\n    'acre foot/minute [survey]': 1233.48924 / 60,\n    'acre foot/second [survey]': 1233.48924,\n    'acre inch/day': (1233.48184 / 12) / 60 / 60 / 24,\n    'acre inch/hour': (1233.48184 / 12) / 60 / 60,\n    'acre inch/minute': (1233.48184 / 12) / 60,\n    'acre inch/second': 1233.48184 / 12,\n    'acre inch/day [survey]': (1233.48924 / 12) / 60 / 60 / 24,\n    'acre inch/hour [survey]': (1233.48924 / 12) / 60 / 60,\n    'acre inch/minute [survey]': (1233.48924 / 12) / 60,\n    'acre inch/second [survey]': 1233.48924 / 12,\n    'barrel/day [petroleum]': (0.003785411784 / 60 / 60 / 24) * 42,\n    'barrel/hour [petroleum]': (0.003785411784 / 60 / 60) * 42,\n    'barrel/minute [petroleum]': (0.003785411784 / 60) * 42,\n    'barrel/second [petroleum]': 0.003785411784 * 42,\n    'barrel/day [UK]': (0.00454609 / 60 / 60 / 24) * 36,\n    'barrel/hour [UK]': (0.00454609 / 60 / 60) * 36,\n    'barrel/minute [UK]': (0.00454609 / 60) * 36,\n    'barrel/second [UK]': 0.00454609 * 36,\n    'barrel/day [US]': (0.003785411784 / 60 / 60 / 24) * 31.5,\n    'barrel/hour [US]': (0.003785411784 / 60 / 60) * 31.5,\n    'barrel/minute [US]': (0.003785411784 / 60) * 31.5,\n    'barrel/second [US]': 0.003785411784 * 31.5,\n    'barrel/day [US beer/wine]': (0.003785411784 / 60 / 60 / 24) * 31,\n    'barrel/hour [US beer/wine]': (0.003785411784 / 60 / 60) * 31,\n    'barrel/minute [US beer/wine]': (0.003785411784 / 60) * 31,\n    'barrel/second [US beer/wine]': 0.003785411784 * 31,\n    'billion cubic foot/day': 28316847 / 60 / 60 / 24,\n    'billion cubic foot/hour': 28316847 / 60 / 60,\n    'billion cubic foot/minute': 28316847 / 60,\n    'billion cubic foot/second': 28316847,\n    'centiliter/day': 0.00001 / 60 / 60 / 24,\n    'centiliter/hour': 0.00001 / 60 / 60,\n    'centiliter/minute': 0.00001 / 60,\n    'centiliter/second': 0.00001,\n    'cubem/day': 4168181830 / 60 / 60 / 24,\n    'cubem/hour': 4168181830 / 60 / 60,\n    'cubem/minute': 4168181830 / 60,\n    'cubem/second': 4168181830,\n    'cubic centimeter/day': 0.000001 / 60 / 60 / 24,\n    'cubic centimeter/hour': 0.000001 / 60 / 60,\n    'cubic centimeter/minute': 0.000001 / 60,\n    'cubic centimeter/second': 0.000001,\n    'cubic decimeter/day': 0.001 / 60 / 60 / 24,\n    'cubic decimeter/hour': 0.001 / 60 / 60,\n    'cubic decimeter/minute': 0.001 / 60,\n    'cubic decimeter/second': 0.001,\n    'cubic dekameter/day': 1000 / 60 / 60 / 24,\n    'cubic dekameter/hour': 1000 / 60 / 60,\n    'cubic dekameter/minute': 1000 / 60,\n    'cubic dekameter/second': 1000,\n    'cubic foot/day': 0.028316847 / 60 / 60 / 24,\n    'cubic foot/hour': 0.028316847 / 60 / 60,\n    'cubic foot/minute': 0.028316847 / 60,\n    'cubic foot/second': 0.028316847,\n    'cubic inch/day': 0.028316847 / 1728 / 60 / 60 / 24,\n    'cubic inch/hour': 0.028316847 / 1728 / 60 / 60,\n    'cubic inch/minute': 0.028316847 / 1728 / 60,\n    'cubic inch/second': 0.028316847 / 1728,\n    'cubic kilometer/day': 1000000000 / 60 / 60 / 24,\n    'cubic kilometer/hour': 1000000000 / 60 / 60,\n    'cubic kilometer/minute': 1000000000 / 60,\n    'cubic kilometer/second': 1000000000,\n    'cubic meter/day': 1 / 60 / 60 / 24,\n    'cubic meter/hour': 1 / 60 / 60,\n    'cubic meter/minute': 1 / 60,\n    'cubic meter/second': 1,\n    'cubic mile/day': 4168181830 / 60 / 60 / 24,\n    'cubic mile/hour': 4168181830 / 60 / 60,\n    'cubic mile/minute': 4168181830 / 60,\n    'cubic mile/second': 4168181830,\n    'cubic millimeter/day': 0.000000001 / 60 / 60 / 24,\n    'cubic millimeter/hour': 0.000000001 / 60 / 60,\n    'cubic millimeter/minute': 0.000000001 / 60,\n    'cubic millimeter/second': 0.000000001,\n    'cubic yard/day': (0.028316847 * 27) / 60 / 60 / 24,\n    'cubic yard/hour': (0.028316847 * 27) / 60 / 60,\n    'cubic yard/minute': (0.028316847 * 27) / 60,\n    'cubic yard/second': 0.028316847 * 27,\n    'cusec': 0.028316847,\n    'deciliter/day': 0.0001 / 60 / 60 / 24,\n    'deciliter/hour': 0.0001 / 60 / 60,\n    'deciliter/minute': 0.0001 / 60,\n    'deciliter/second': 0.0001,\n    'dekaliter/day': 0.01 / 60 / 60 / 24,\n    'dekaliter/hour': 0.01 / 60 / 60,\n    'dekaliter/minute': 0.01 / 60,\n    'dekaliter/second': 0.01,\n    'gallon/day [UK]': 0.00454609 / 60 / 60 / 24,\n    'gallon/hour [UK]': 0.00454609 / 60 / 60,\n    'gallon/minute [UK]': 0.00454609 / 60,\n    'gallon/second [UK]': 0.00454609,\n    'gallon/day [US]': 0.003785411784 / 60 / 60 / 24,\n    'gallon/hour [US]': 0.003785411784 / 60 / 60,\n    'gallon/minute [US]': 0.003785411784 / 60,\n    'gallon/second [US]': 0.003785411784,\n    'hectare meter/day': 10000 / 60 / 60 / 24,\n    'hectare meter/hour': 10000 / 60 / 60,\n    'hectare meter/minute': 10000 / 60,\n    'hectare meter/second': 10000,\n    'hectoliter/day': 0.1 / 60 / 60 / 24,\n    'hectoliter/hour': 0.1 / 60 / 60,\n    'hectoliter/minute': 0.1 / 60,\n    'hectoliter/second': 0.1,\n    'kiloliter/day': 1 / 60 / 60 / 24,\n    'kiloliter/hour': 1 / 60 / 60,\n    'kiloliter/minute': 1 / 60,\n    'kiloliter/second': 1,\n    'lambda/day': 0.000000001 / 60 / 60 / 24,\n    'lambda/hour': 0.000000001 / 60 / 60,\n    'lambda/minute': 0.000000001 / 60,\n    'lambda/second': 0.000000001,\n    'liter/day': 0.001 / 60 / 60 / 24,\n    'liter/hour': 0.001 / 60 / 60,\n    'liter/minute': 0.001 / 60,\n    'liter/second': 0.001,\n    'milliliter/day': 0.000001 / 60 / 60 / 24,\n    'milliliter/hour': 0.000001 / 60 / 60,\n    'milliliter/minute': 0.000001 / 60,\n    'milliliter/second': 0.000001,\n    'million acre foot/day': 1233481840 / 60 / 60 / 24,\n    'million acre foot/hour': 1233481840 / 60 / 60,\n    'million acre foot/minute': 1233481840 / 60,\n    'million acre foot/second': 1233481840,\n    'million cubic foot/day': 28316.847 / 60 / 60 / 24,\n    'million cubic foot/hour': 28316.847 / 60 / 60,\n    'million cubic foot/minute': 28316.847 / 60,\n    'million cubic foot/second': 28316.847,\n    'million gallon/day [UK]': 4546.09 / 60 / 60 / 24,\n    'million gallon/hour [UK]': 4546.09 / 60 / 60,\n    'million gallon/minute [UK]': 4546.09 / 60,\n    'million gallon/second [UK]': 4546.09,\n    'million gallon/day [US]': 3785.4118 / 60 / 60 / 24,\n    'million gallon/hour [US]': 3785.4118 / 60 / 60,\n    'million gallon/minute [US]': 3785.4118 / 60,\n    'million gallon/second [US]': 3785.4118,\n    'miner\\'s inch [AZ, CA, OR] ': 0.028316847 / 60 * 1.5,\n    'miner\\'s inch [CO]': 0.028316847 / 60 * 1.5625,\n    'miner\\'s inch [ID, WA, NM]': 0.003785411784 / 60 * 9,\n    'ounce/day [UK]': 0.00454609 / 160 / 60 / 60 / 24,\n    'ounce/hour [UK]': 0.00454609 / 160 / 60 / 60,\n    'ounce/minute [UK]': 0.00454609 / 160 / 60,\n    'ounce/second [UK]': 0.00454609 / 160,\n    'ounce/day [US]': 0.003785411784 / 128 / 60 / 60 / 24,\n    'ounce/hour [US]': 0.003785411784 / 128 / 60 / 60,\n    'ounce/minute [US]': 0.003785411784 / 128 / 60,\n    'ounce/second [US]': 0.003785411784 / 128,\n    'petrograd standard/day': (0.028316847 * 165) / 60 / 60 / 24,\n    'petrograd standard/hour': (0.028316847 * 165) / 60 / 60,\n    'petrograd standard/minute': (0.028316847 * 165) / 60,\n    'petrograd standard/second': 0.028316847 * 165,\n    'stere/day': 1 / 60 / 60 / 24,\n    'stere/hour': 1 / 60 / 60,\n    'stere/minute': 1 / 60,\n    'stere/second': 1,\n    'thousand cubic foot/day': 28.316847 / 60 / 60 / 24,\n    'thousand cubic foot/hour': 28.316847 / 60 / 60,\n    'thousand cubic foot/minute': 28.316847 / 60,\n    'thousand cubic foot/second': 28.316847,\n    'trillion cubic foot/day': 28316847000 / 60 / 60 / 24,\n    'trillion cubic foot/hour': 28316847000 / 60 / 60,\n    'trillion cubic foot/minute': 28316847000 / 60,\n    'trillion cubic foot/second': 28316847000\n  }\n};\n","module.exports = {\n  name: 'force',\n  //conversion: {},\n  base: 'newton',\n  //aliases: { },\n  units: {\n    'attonewton': 1e-18,\n    'centinewton': 0.01,\n    'decigram-force': 0.000980665,\n    'decinewton': 0.1,\n    'dekagram-force': 0.0980665,\n    'dekanewton': 10,\n    'dyne': 0.00001,\n    'exanewton': 1e+18,\n    'femtonewton': 1e-15,\n    'giganewton': 1e+9,\n    'gram-force': 0.00980665,\n    'hectonewton': 100,\n    'joule/meter': 1,\n    'kilogram-force': 9.80665,\n    'kilonewton': 1000,\n    'kilopond': 9.80665,\n    'kip': 4448.2216,\n    'meganewton': 1000000,\n    'megapond': 9806.65,\n    'micronewton': 0.000001,\n    'millinewton': 0.001,\n    'nanonewton': 0.000000001,\n    'newton': 1,\n    'ounce-force': 4.4482216 / 16,\n    'petanewton': 1e+15,\n    'piconewton': 1e-12,\n    'pond': 0.00980665,\n    'pound-force': 4.4482216,\n    'poundal': 0.13825495,\n    'sthene': 1000,\n    'teranewton': 1e+12,\n    'ton-force [long]': 4.4482216 * 2240,\n    'ton-force [metric]': 9806.65,\n    'ton-force [short]': 4.4482216 * 2000,\n    'yoctonewton': 1e-24,\n    'yottanewton': 1e+24,\n    'zeptonewton': 1e-21,\n    'zettanewton': 1e+21\n  }\n};\n","module.exports = {\n  name: 'frequency',\n  //conversion: {},\n  base: 'hertz',\n  aliases: {\n    'hz': 'hertz',\n    'khz': 'kilohertz',\n    'Mhz': 'megahertz',\n    'Ghz': 'gigahertz',\n    'THz': 'terrahertz',\n    'RPM': 'revolution/minute'\n  },\n  units: {\n    '1/second': 1,\n    'cycle/second': 1,\n    'degree/hour': 1 / 1296000,\n    'degree/minute': 1 / 21600,\n    'degree/second': 1 / 360,\n    'gigahertz': 1000000000,\n    'hertz': 1,\n    'kilohertz': 1000,\n    'megahertz': 1000000,\n    'millihertz': 1 / 1000,\n    'radian/hour': 1 / 22619.467,\n    'radian/minute': 1 / 376.99112,\n    'radian/second': 1 / 6.2831853,\n    'revolution/hour': 1 / 3600,\n    'revolution/minute': 1 / 60,\n    'revolution/second': 1,\n    'terrahertz': 1000000000000\n  }\n};\n","module.exports = {\n  name: 'illuminance',\n  //conversion: {},\n  base: 'lumen/square meter',\n  //aliases: { },\n  units: {\n    'footcandle': 10.7639104,\n    'kilolux': 1000,\n    'lumen/square centimeter': 10000,\n    'lumen/square foot': 10.7639104,\n    'lumen/square inch': 10.7639104 * 144,\n    'lumen/square meter': 1,\n    'lux': 1,\n    'metercandle': 1,\n    'milliphot': 10,\n    'nox': 0.001,\n    'phot': 10000\n  }\n};\n","module.exports = {\n  name: 'luminance',\n  //conversion: {},\n  base: 'candela/square meter',\n  //aliases: { },\n  units: {\n    'apostilb': 3183.0989 / 10000,\n    'blondel': 3183.0989 / 10000,\n    'candela/square centimeter': 10000,\n    'candela/square foot': 10.76391,\n    'candela/square inch': 10.76391 * 144,\n    'candela/square meter': 1,\n    'Footlambert': 3.4262591,\n    'kilocandela/square centimeter': 10000 * 1000,\n    'kilocandela/square foot': 10.76391 * 1000,\n    'kilocandela/square inch': (6391 * 144) * 1000,\n    'kilocandela/square meter': 1000,\n    'lambert': 3183.0989,\n    'millilambert': 3183.0989 * 0.001,\n    'nit': 1,\n    'stilb': 10000\n  }\n};\n","module.exports = {\n  name: 'mass',\n  //conversion: {},\n  base: 'kilogram',\n  aliases: {\n    'as': 'as, ass [Northern Europe]',\n    'ass': 'as, ass [Northern Europe]',\n    'atomic mass unit': 'atomic mass unit [1998]',\n    'carat': 'carat [international]',\n    'carga': 'carga [Mexico]',\n    'chalder': 'chalder, chaldron',\n    'chaldron': 'chalder, chaldron',\n    'lb': 'pound',\n    'lbs': 'pound',\n    'ton': 'ton [metric]'\n  },\n  units: {\n    'arratel, artel [Arab]': 0.5,\n    'arroba [Portugal]': 14.69,\n    'arroba [Spain]': 11.502,\n    'as, ass [Northern Europe]': 0.000052,\n    'atomic mass unit [1960]': 1.6603145e-27,\n    'atomic mass unit [1973]': 1.6605655e-27,\n    'atomic mass unit [1986]': 1.6605402e-27,\n    'atomic mass unit [1998]': 1.66053873e-27,\n    'avogram': 1.6605402e-27,\n    'bag [portland cement]': 0.45359237 * 94,\n    'baht [Thailand]': 0.015,\n    'bale [UK]': 0.45359237 * 720,\n    'bale [US]': 0.45359237 * 480,\n    'bismar pound [Denmark]': 5.993,\n    'candy [India]': 254,\n    'carat [international]': 0.0002,\n    'carat [metric]': 0.0002,\n    'carat [UK]': 0.00006479891 * 4,\n    'carat [pre-1913 US]': 0.0002053,\n    'carga [Mexico]': 140,\n    'catti [China]': 0.604875,\n    'catti [Japan]': 0.594,\n    'catty [China]': 0.5,\n    'catty [Japan, Thailand]': 0.6,\n    'cental': 0.45359237 * 100,\n    'centigram': 0.00001,\n    'centner [Germany]': 50,\n    'centner [Russia]': 100,\n    'chalder, chaldron': 2692.52,\n    'chin [China]': 0.5,\n    'chin [Japan]': 0.6,\n    'clove': 3.175,\n    'crith': 0.000089885,\n    'dalton': 1.6605402e-27,\n    'dan [China]': 50,\n    'dan [Japan]': 60,\n    'decigram': 0.0001,\n    'decitonne': 100,\n    'dekagram': 0.01,\n    'dekatonne': 10000,\n    'denaro [Italy]': 0.0011,\n    'denier [France]': 0.001275,\n    'drachme': 0.0038,\n    'dram': 0.45359237 / 256,\n    'dram [apothecaries]': 0.00006479891 * 60,\n    'dyne': 1.01971621E-06,\n    'electron': 9.109382e-31,\n    'electronvolt': 1.782662e-36,\n    'etto [Italy]': 0.1,\n    'exagram': 1e+15,\n    'femtogram': 1e-18,\n    'firkin [butter, soap]': 0.45359237 * 56,\n    'flask': 34.7,\n    'fother [lead]': (0.45359237 * 72) * 30,\n    'fotmal [lead]': 0.45359237 * 72,\n    'funt, funte [Russia]': 0.4095,\n    'gamma': 0.000000001,\n    'gigaelectronvolt': 1.782662e-27,\n    'gigagram': 1000000,\n    'gigatonne': 1e+12,\n    'gin [China]': 0.6,\n    'gin [Japan]': 0.594,\n    'grain': 0.00006479891,\n    'gram': 0.001,\n    'gran [Germany]': 0.00082,\n    'grano, grani [Italy]': 0.00004905,\n    'gros': 0.003824,\n    'hectogram': 0.1,\n    'hundredweight [long, UK]': 0.45359237 * 112,\n    'hundredweight [short, US]': 0.45359237 * 100,\n    'hyl': 9.80665,\n    'jin [China]': 0.5,\n    'jupiter': 1.899e+27,\n    'kati [China]': 0.5,\n    'kati [Japan]': 0.6,\n    'keel [coal]': 0.45359237 * 47488,\n    'keg [nails]': 0.45359237 * 100,\n    'kilodalton': 1.6605402e-24,\n    'kilogram': 1,\n    'kilogram-force': 1,\n    'kiloton [long, UK]': (0.45359237 * 2240) * 1000,\n    'kiloton [short, US]': (0.45359237 * 2000) * 1000,\n    'kilotonne': 1000000,\n    'kin [Japan]': 0.6,\n    'kip': 0.45359237 * 1000,\n    'koyan [Malaysia]': 2419,\n    'kwan [Japan]': 3.75,\n    'last [Germany]': 2000,\n    'last [US]': 0.45359237 * 4000,\n    'last [US, wool]': 0.45359237 * 4368,\n    'liang [China]': 0.05,\n    'libra [Italy]': 0.339,\n    'libra [Portugal, Spain]': 0.459,\n    'libra [ancient Rome]': 0.323,\n    'libra [metric]': 1,\n    'livre [France]': 0.4895,\n    'long ton': 0.45359237 * 2240,\n    'lot [Germany]': 0.015,\n    'mace [China]': 0.003778,\n    'mahnd [Arab]': 0.9253284348,\n    'marc [France]': 0.24475,\n    'marco [Spanish]': 0.23,\n    'mark [English]': 0.2268,\n    'mark [German]': 0.2805,\n    'maund [India]': 37.3242,\n    'maund [Pakistan]': 40,\n    'megadalton': 1.6605402e-21,\n    'megagram': 1000,\n    'megatonne': 1e+9,\n    'mercantile pound': 0.46655,\n    'metric ton': 1000,\n    'mic': 1e-9,\n    'microgram': 1e-9,\n    'millidalton': 1.6605402e-30,\n    'millier': 1000,\n    'milligram': 0.000001,\n    'millimass unit': 1.6605402e-30,\n    'mina [Hebrew]': 0.499,\n    'momme [Japan]': 0.00375,\n    'myriagram': 10,\n    'nanogram': 1e-12,\n    'Newton': 0.101971621,\n    'obol, obolos, obolus [Greece]': 0.0001,\n    'obolos [Ancient Greece]': 0.0005,\n    'obolus [Ancient Rome]': 0.00057,\n    'okka [Turkey]': 1.28,\n    'on√ßa [Portuguese]': 0.02869,\n    'once [France]': 0.03059,\n    'oncia [Italy]': 0.0273,\n    'onza [Spanish]': 0.02869,\n    'ons [Dutch]': 0.1,\n    'ounce': 0.45359237 / 16,\n    'ounce-force': 0.45359237 / 16,\n    'ounce [troy]': ((144 / 175) * 0.45359237) / 12,\n    'packen [Russia]': 490.79,\n    'pennyweight [troy]': (((144 / 175) * 0.45359237) / 12) / 20,\n    'petagram': 1e+12,\n    'pfund [Denmark, Germany]': 0.5,\n    'picogram': 1e-15,\n    'point': 0.000002,\n    'pond [Dutch]': 0.5,\n    'pound': 0.45359237,\n    'pound-force': 0.45359237,\n    'pound [metric]': 0.5,\n    'pound [troy]': (144 / 175) * 0.45359237,\n    'pud, pood [Russia]': 16.3,\n    'pund [Scandinavia]': 0.5,\n    'qian [China]': 0.005,\n    'qintar [Arab]': 50,\n    'quarter [UK]': 0.45359237 * 28,\n    'quarter [US]': 0.45359237 * 25,\n    'quarter (ton) [US]': 0.45359237 * 500,\n    'quartern': (0.45359237 * 14) / 4,\n    'quartern-loaf': 0.45359237 * 4,\n    'quintal [French]': 48.95,\n    'quintal [metric]': 100,\n    'quintal [Portugal]': 58.752,\n    'quintal [Spanish]': 45.9,\n    'rebah': 0.01142 / 4,\n    'Robie': 0.01,\n    'rotl, rotel, rottle, ratel [Arab]': 0.5,\n    'sack [UK, wool]': 0.45359237 * 364,\n    'scruple [troy]': (((144 / 175) * 0.45359237) / 12) / 24,\n    'seer [India]': 37.3242 / 40,\n    'seer [Pakistan]': 1,\n    'shekel [Hebrew]': 0.01142,\n    'short ton': 0.45359237 * 2000,\n    'slinch': 14.593903 * 12,\n    'slug': 14.593903,\n    'stone': 0.45359237 * 14,\n    'tael, tahil [Japan]': 0.03751,\n    'tahil [China]': 0.05,\n    'talent [Hebrew]': 30,\n    'tan [China]': 50,\n    'technische mass einheit (TME)': 9.80665,\n    'teragram': 1e+9,\n    'tetradrachm [Hebrew]': 0.014,\n    'tical [Asia]': 0.0164,\n    'tod': (0.45359237 * 14) * 2,\n    'tola [India]': (37.3242 / 40) / 80,\n    'tola [Pakistan]': 1 / 80,\n    'ton [long, UK]': 0.45359237 * 2240,\n    'ton [metric]': 1000,\n    'ton [short, US]': 0.45359237 * 2000,\n    'tonelada [Portugal]': 793.15,\n    'tonelada [Spain]': 919.9,\n    'tonne': 1000,\n    'tonneau [France]': 979,\n    'tovar [Bulgaria]': 128.8,\n    'troy ounce': ((144 / 175) * 0.45359237) / 12,\n    'troy pound': (144 / 175) * 0.45359237,\n    'truss': 0.45359237 * 56,\n    'uncia [Rome]': 0.0272875,\n    'unze [Germany]': 0.03125,\n    'vagon [Yugoslavia]': 10000,\n    'yoctogram': 1e-27,\n    'yottagram': 1e+21,\n    'zentner [Germany]': 50,\n    'zeptogram': 1e-24,\n    'zettagram': 1e+18\n  }\n};\n","module.exports = {\n  name: 'power',\n  //conversion: {},\n  base: 'newton meter/second',\n  aliases: {\n    'horsepower': 'horsepower [international]',\n    'hp': 'horsepower [international]'\n  },\n  units: {\n    'attowatt': 1e-18,\n    'Btu/hour [I.T.]': 0.29307107,\n    'Btu/minute [I.T.]': 0.29307107 * 60,\n    'Btu/second [I.T.]': 0.29307107 * 60 * 60,\n    'calorie/hour [I.T.]': 11630 * 1e-7,\n    'calorie/minute [I.T.]': 11630 * 60 * 1e-7,\n    'calorie/second [I.T.]': 11630 * 60 * 60 * 1e-7,\n    'centiwatt': 0.01,\n    'cheval vapeur': 9.80665 * 75,\n    'clusec': 0.0000013332237,\n    'deciwatt': 0.1,\n    'dekawatt': 10,\n    'dyne centimeter/hour': (1e-7 / 60) / 60,\n    'dyne centimeter/minute': 1e-7 / 60,\n    'dyne centimeter/second': 1e-7,\n    'erg/hour': (1e-7 / 60) / 60,\n    'erg/minute': 1e-7 / 60,\n    'erg/second': 1e-7,\n    'exawatt': 1e+18,\n    'femtowatt': 1e-15,\n    'foot pound-force/hour': 1.3558179 / 60 / 60,\n    'foot pound-force/minute': 1.3558179 / 60,\n    'foot pound-force/second': 1.3558179,\n    'foot poundal/hour': 0.04214011 / 60 / 60,\n    'foot poundal/minute': 0.04214011 / 60,\n    'foot poundal/second': 0.04214011,\n    'gigawatt': 1e+9,\n    'gram-force centimeter/hour': 0.0000980665 / 60 / 60,\n    'gram-force centimeter/minute': 0.0000980665 / 60,\n    'gram-force centimeter/second': 0.0000980665,\n    'hectowatt': 100,\n    'horsepower [international]': 745.69987,\n    'horsepower [electric]': 746,\n    'horsepower [metric]': 9.80665 * 75,\n    'horsepower [water]': 746.043,\n    'inch ounce-force revolution/minute': 0.00073948398,\n    'joule/hour': 1 / 60 / 60,\n    'joule/minute': 1 / 60,\n    'joule/second': 1,\n    'kilocalorie/hour [I.T.]': 1.163,\n    'kilocalorie/minute [I.T.]': 1.163 * 60,\n    'kilocalorie/second [I.T.]': 1.163 * 60 * 60,\n    'kilogram-force meter/hour': 9.80665 / 60 / 60,\n    'kilogram-force meter/minute': 9.80665 / 60,\n    'kilogram-force meter/second': 9.80665,\n    'kilopond meter/hour': 9.80665 / 60 / 60,\n    'kilopond meter/minute': 9.80665 / 60,\n    'kilopond meter/second': 9.80665,\n    'kilowatt': 1000,\n    'megawatt': 1000000,\n    'microwatt': 0.000001,\n    'million Btu/hour [I.T.]': 293071.07,\n    'milliwatt': 0.001,\n    'nanowatt': 1e-9,\n    'newton meter/hour': 1 / 60 / 60,\n    'newton meter/minute': 1 / 60,\n    'newton meter/second': 1,\n    'petawatt': 1e+15,\n    'pferdestarke': 9.80665 * 75,\n    'picowatt': 1e-12,\n    'poncelet': 9.80665 * 100,\n    'pound square foot/cubic second': 0.04214011,\n    'terawatt': 1e+12,\n    'ton of refrigeration': 0.012 * 293071.07,\n    'watt': 1,\n    'yoctowatt': 1e-24,\n    'yottawatt': 1e+24,\n    'zeptowatt': 1e-21,\n    'zettawatt': 1e+21\n  }\n};\n","module.exports = {\n  name: 'pressure',\n  //conversion: {},\n  base: 'newton/square meter',\n  aliases: {\n    'PSI': 'pound/square inch'\n  },\n  units: {\n    'atmosphere [standard]': 101325.01,\n    'atmosphere [technical]': 98066.5,\n    'attobar': 1e-13,\n    'attopascal': 1e-18,\n    'bar': 100000,\n    'barad': 0.1,\n    'barye': 0.1,\n    'centibar': 1000,\n    'centihg': 1333.2239,\n    'centimeter of mercury [0 ¬∞C]': 1333.2239,\n    'centimeter of water [4 ¬∞C]': 98.0665,\n    'centipascal': 0.01,\n    'centitorr': 1.3332237,\n    'decibar': 10000,\n    'decipascal': 0.1,\n    'decitorr': 13.332237,\n    'dekabar': 1000000,\n    'dekapascal': 10,\n    'dyne/square centimeter': 0.1,\n    'exabar': 1e+23,\n    'exapascal': 1e+18,\n    'femtobar': 1e-10,\n    'femtopascal': 1e-15,\n    'foot of air [0 ¬∞C]': 3.8640888,\n    'foot of air [15 ¬∞C]': 3.6622931,\n    'foot of head': 2989.0669,\n    'foot of mercury [0 ¬∞C]': 40636.664,\n    'foot of water [4 ¬∞C]': 2989.0669,\n    'gigabar': 1e+14,\n    'gigapascal': 1e+9,\n    'gram-force/square centimeter': 98.0665,\n    'hectobar': 1e+7,\n    'hectopascal': 100,\n    'inch of air [0 ¬∞C]': 3.8640888 / 12,\n    'inch of air [15 ¬∞C]': 3.6622931 / 12,\n    'inch of mercury [0 ¬∞C]': 40636.664 / 12,\n    'inch of water [4 ¬∞C]': 2989.0669 / 12,\n    'kilobar': 1e+8,\n    'kilogram-force/square centimeter': 98066.5,\n    'kilogram-force/square meter': 9.80665,\n    'kilogram-force/square millimeter': 9806650,\n    'kilonewton/square meter': 1000,\n    'kilopascal': 1000,\n    'kilopond/square centimeter': 98066.5,\n    'kilopond/square meter': 9.80665,\n    'kilopond/square millimeter': 9806650,\n    'kip/square foot': 430.92233 * (1 / 0.009),\n    'kip/square inch': (430.92233 * (1 / 0.009)) * 144,\n    'megabar': 1e+11,\n    'meganewton/square meter': 1000000,\n    'megapascal': 1000000,\n    'meter of air [0 ¬∞C]': 12.677457,\n    'meter of air [15 ¬∞C]': 12.015397,\n    'meter of head': 9804.139432,\n    'microbar': 0.1,\n    'micrometer of mercury [0 ¬∞C]': 0.13332239,\n    'micrometer of water [4 ¬∞C]': 0.00980665,\n    'micron of mercury [0 ¬∞C]': 0.13332239,\n    'micropascal': 0.000001,\n    'millibar': 100,\n    'millihg': 133.32239,\n    'millimeter of mercury [0 ¬∞C]': 133.32239,\n    'millimeter of water [4 ¬∞C]': 9.80665,\n    'millipascal': 0.001,\n    'millitorr': 0.13332237,\n    'nanobar': 0.0001,\n    'nanopascal': 1e-9,\n    'newton/square meter': 1,\n    'newton/square millimeter': 1000000,\n    'ounce/square inch': 430.92233,\n    'pascal': 1,\n    'petabar': 1e+20,\n    'petapascal': 1e+15,\n    'picobar': 0.0000001,\n    'picopascal': 1e-12,\n    'pieze': 1000,\n    'pound/square foot': 430.92233 / 9,\n    'pound/square inch': 430.92233 * 16,\n    'poundal/square foot': 1.4881639,\n    'sthene/square meter': 1000,\n    'technical atmosphere': 98066.5,\n    'terabar': 1e+17,\n    'terapascal': 1e+12,\n    'ton/square foot [long]': 430.92233 * (248 + (1/1.125)),\n    'ton/square foot [short]': 430.92233 * (1 / 0.0045),\n    'ton/square inch [long]': (430.92233 * (248 + (1 / 1.125))) * 144,\n    'ton/square inch [short]': (430.92233 * (1 / 0.0045)) * 144,\n    'ton/square meter': 9806.65,\n    'torr': 133.32237,\n    'Water Column [centimeter]': 98.0665,\n    'Water Column [inch]': 2989.0669 / 12,\n    'Water Column [millimeter]': 9.80665,\n    'yoctobar': 1e-19,\n    'yoctopascal': 1e-24,\n    'yottabar': 1e+29,\n    'yottapascal': 1e+24,\n    'zeptobar': 1e-16,\n    'zeptopascal': 1e-21,\n    'zettabar': 1e+26,\n    'zettapascal': 1e+21\n  }\n};\n","module.exports = {\n  name: 'temperature',\n  //conversion: {},\n  base: 'kelvin',\n  aliases: {\n    'C': 'celcius',\n    'F': 'fahrenheit',\n    'K': 'kelvin'\n  },\n  units: {\n    'celcius': {\n      fromBase(k) {\n        return k - 273.15;\n      },\n      toBase(c) {\n        return c + 273.15;\n      }\n    },\n    'fahrenheit': {\n      fromBase(k) {\n        return ((k - 273.15) * 1.8) + 32;\n      },\n      toBase(f) {\n        return ((f - 32) / 1.8) + 273.15;\n      }\n    },\n    'kelvin': 1,\n    'rankine': {\n      fromBase(k) {\n        return k * 1.8;\n      },\n      toBase(r) {\n        return r / 1.8;\n      }\n    },\n    'reaumur': {\n      fromBase(k) {\n        return (k * 1.25) + 273.15;\n      },\n      toBase(r) {\n        return (r - 273.15) / 1.25;\n      }\n    }\n  }\n};\n","module.exports = {\n  name: 'time',\n  conversion: {\n    params: {\n      initialVelocity: 'velocity',\n      velocity: 'velocity',\n      acceleration: 'acceleration',\n      distance: 'distance'\n    },\n    converters: {\n      velocityOverAcceleration(params) {\n        return ((params.velocity || 0) - (params.initialVelocity || 0)) / params.acceleration;\n      },\n      distanceOverVelocity(params) {\n        return params.distance * 2 / ((params.initialVelocity || 0) + params.velocity);\n      }\n    }\n  },\n  base: 'second',\n  aliases: {\n    'ns': 'nanosecond',\n    'ms': 'millisecond',\n    's': 'second',\n    'm': 'minute',\n    'h': 'hour',\n    'd': 'day',\n    'w': 'week'\n  },\n  units: {\n    'shake': 1e-8,\n    'second': 1,\n    'minute': 60,\n    'hour': 3600,\n    'day': 86400,\n    'week': 604800,\n    'fortnight': 1209600,\n    'month': 2628000,\n    'quarter': 7884000,\n    'year': 31536000,\n    'decade': 315360000,\n    'century': 3153600000,\n    'microsecond': 1e-6,\n    'millennium': 31536000000,\n    'millisecond': 0.001,\n    'nanosecond': 1e-9\n  }\n};\n","module.exports = {\n  name: 'torque',\n  //conversion: {},\n  base: 'newton meter',\n  //aliases: { },\n  units: {\n    'dyne centimeter': 0.0000001,\n    'gram centimeter': 9.80665 / 100000,\n    'kilogram centimeter': 9.80665 / 100,\n    'kilogram meter': 9.80665,\n    'kilonewton meter': 1000,\n    'kilopond meter': 9.80665,\n    'meganewton meter': 1000000,\n    'micronewton meter': 0.000001,\n    'millinewton meter': 0.001,\n    'newton centimeter': 0.01,\n    'newton meter': 1,\n    'ounce foot': 0.084738622,\n    'ounce inch': 0.084738622 / 12,\n    'pound foot': 0.084738622 * 16,\n    'poundal foot': 0.0421401099752144,\n    'pound inch': 0.084738622 / 12 * 16\n  }\n};\n","module.exports = {\n  name: 'velocity',\n  conversion: {\n    params: {\n      initialVelocity: 'velocity',\n      velocity: 'velocity',\n      acceleration: 'acceleration',\n      time: 'time'\n    },\n    converters: {\n      accelerationAndTime(params) {\n        return (params.initialVelocity || 0) + ((params.acceleration || 0) * params.time);\n      },\n      initialVelocity(params) {\n        return (params.velocity || 0) - ((params.acceleration || 0) * params.time);\n      }\n    }\n  },\n  base: 'meter/second',\n  aliases: {\n    'kph': 'kilometer/hour',\n    'mph': 'mile/hour'\n  },\n  units: {\n    'benz': 1,\n    'centimeter/day': 0.01 / 86400,\n    'centimeter/hour': 0.01 / 3600,\n    'centimeter/minute': 0.01 / 60,\n    'centimeter/second': 0.01,\n    'dekameter/day': 10 / 86400,\n    'dekameter/hour': 10 / 3600,\n    'dekameter/minute': 10 / 60,\n    'dekameter/second': 10,\n    'foot/day': 0.3048 / 86400,\n    'foot/hour': 0.3048 / 3600,\n    'foot/minute': 0.3048 / 60,\n    'foot/second': 0.3048,\n    'furlong/day [survey]': 201.1684 / 86400,\n    'furlong/fortnight [survey]': 201.1684 / 1209600,\n    'furlong/hour [survey]': 201.1684 / 3600,\n    'furlong/minute [survey]': 201.1684 / 60,\n    'furlong/second [survey]': 201.1684,\n    'hectometer/day': 100 / 86400,\n    'hectometer/hour': 100 / 3600,\n    'hectometer/minute': 100 / 60,\n    'hectometer/second': 100,\n    'inch/day': (0.3048 / 12) / 86400,\n    'inch/hour': (0.3048 / 12) / 3600,\n    'inch/minute': (0.3048 / 12) / 60,\n    'inch/second': 0.3048 / 12,\n    'kilometer/day': 1000 / 86400,\n    'kilometer/hour': 1000 / 3600,\n    'kilometer/minute': 1000 / 60,\n    'kilometer/second': 1000,\n    'knot': 1852 / 3600,\n    'league/day [statute]': 4828.0417 / 86400,\n    'league/hour [statute]': 4828.0417 / 3600,\n    'league/minute [statute]': 4828.0417 / 60,\n    'league/second [statute]': 4828.0417,\n    'mach': 340.29,\n    'megameter/day': 1000000 / 86400,\n    'megameter/hour': 1000000 / 3600,\n    'megameter/minute': 1000000 / 60,\n    'megameter/second': 1000000,\n    'meter/day': 1 / 86400,\n    'meter/hour': 1 / 3600,\n    'meter/minute': 1 / 60,\n    'meter/second': 1,\n    'mile/day': (0.3048 * 5280) / 86400,\n    'mile/hour': (0.3048 * 5280) / 3600,\n    'mile/minute': (0.3048 * 5280) / 60,\n    'mile/second': 0.3048 * 5280,\n    'millimeter/day': 0.001 / 86400,\n    'millimeter/hour': 0.001 / 3600,\n    'millimeter/minute': 0.001 / 60,\n    'millimeter/second': 0.001,\n    'millimeter/microsecond': 1000,\n    'millimeter / 100 microsecond': 10,\n    'nautical mile/day': 1852 / 86400,\n    'nautical mile/hour': 1852 / 3600,\n    'nautical mile/minute': 1852 / 60,\n    'nautical mile/second': 1852,\n    'speed of light [air]': 299702547,\n    'speed of light [glass]': 199861638,\n    'speed of light [ice]': 228849204,\n    'speed of light [vacuum]': 299792458,\n    'speed of light [water]': 225407863,\n    'speed of sound [air]': 340.29,\n    'speed of sound [metal]': 5000,\n    'speed of sound [water]': 1500,\n    'yard/day': (0.3048 * 3) / 86400,\n    'yard/hour': (0.3048 * 3) / 3600,\n    'yard/minute': (0.3048 * 3) / 60,\n    'yard/second': 0.3048 * 3\n  }\n};\n","module.exports = {\n  name: 'dynamic viscosity',\n  //conversion: {},\n  base: 'pascal second',\n  aliases: {\n    'dyne second/cm¬≤': 'dyne second/square centimeter',\n    'gram-force second/cm¬≤': 'gram-force second/square centimeter',\n    'kilogram-force second/m¬≤': 'kilogram-force second/square meter',\n    'newton second/m¬≤': 'newton second/square meter',\n    'pound-force second/ft¬≤': 'pound-force second/square foot',\n    'pound-force second/in¬≤': 'pound-force second/square inch',\n    'poundal hour/ft¬≤': 'poundal hour/square foot',\n    'poundal second/ft¬≤': 'poundal second/square foot'\n  },\n  units: {\n    'centipoise': 0.001,\n    'decipoise': 0.01,\n    'dyne second/square centimeter': 0.1,\n    'gram-force second/square centimeter': 98.0665,\n    'gram/centimeter second': 0.1,\n    'kilogram-force second/square meter': 9.80665,\n    'kilogram/meter hour': 0.0002777777777777778,\n    'kilogram/meter second': 1,\n    'millipascal second': 0.001,\n    'millipoise': 0.0001,\n    'newton second/square meter': 1,\n    'pascal second': 1,\n    'poise': 0.1,\n    'poiseuille [France]': 1,\n    'pound-force second/square foot': 47.880259,\n    'pound-force second/square inch': 6894.75729,\n    'pound/foot hour': 0.00041337887,\n    'pound/foot second': 1.4881639,\n    'poundal hour/square foot': 0.00041337887,\n    'poundal second/square foot': 1.4881639,\n    'reyn': 6894.75729,\n    'slug/foot second': 47.880259\n  }\n};\n","module.exports = {\n  name: 'dynamic viscosity [oil and water]',\n  //conversion: {},\n  base: 'poise',\n  //aliases: { },\n  units: {\n    'poise': 1,\n    'centipoise': 0.01,\n    'lbf-S/square foot': 478.698,\n    'N-S/square meter': 10,\n    'water(20 C)': 0.01,\n    'water(40 C)': 0.0065,\n    'heavy oil(20 C)': 4.5,\n    'heavy oil(40 C)': 1.1,\n    'glycerin(20 C)': 14.1,\n    'glycerin(40 C)': 2.84,\n    'SAE 5W(-18 C)': 12,\n    'SAE 10W(-18 C)': 24,\n    'SAE 20(-18 C)': 96,\n    'SAE 5W(99 C)': 0.039,\n    'SAE 10W(99 C)': 0.042,\n    'SAE 20(99 C)': 0.057\n  }\n};\n","module.exports = {\n  name: 'kinematic viscosity',\n  //conversion: {},\n  base: 'm¬≤/second',\n  //aliases: { },\n  units: {\n    'centistokes': 0.000001,\n    'lentor': 0.0001,\n    'liter/cm day': 0.0000011574074074074074,\n    'liter/cm hour': 0.00002777777777777778,\n    'liter/cm minute': 0.0016666666666666668,\n    'liter/cm second': 0.1,\n    'poise cm¬≥/gram&nbsp;&nbsp;': 0.0001,\n    'cm¬≤/day': 1.1574074074074074e-9,\n    'cm¬≤/hour': 2.7777777777777777e-8,\n    'cm¬≤/minute': 0.0000016666666666666667,\n    'cm¬≤/second': 0.0001,\n    'ft¬≤/day': 0.0000010752667,\n    'ft¬≤/hour': 0.0000258064,\n    'ft¬≤/minute': 2.4,\n    'ft¬≤/second': 0.09290304,\n    'in¬≤/day': 7.4671296e-9,\n    'in¬≤/hour': 1.7921111e-7,\n    'in¬≤/minute': 0.000010752667,\n    'in¬≤/second': 0.00064516,\n    'm¬≤/day': 0.000011574074074074073,\n    'm¬≤/hour': 0.0002777777777777778,\n    'm¬≤/minute': 0.016666666666666666,\n    'm¬≤/second': 1,\n    'mm¬≤/day': 1.1574074074074074e-11,\n    'mm¬≤/hour': 2.7777777777777777e-10,\n    'mm¬≤/minute': 1.6666666666666667e-8,\n    'mm¬≤/second': 0.000001,\n    'stokes': 0.0001\n  }\n};\n","module.exports = {\n  name: 'volume',\n  //conversion: {},\n  base: 'stere',\n  //aliases: { },\n  units: {\n    'stere': 1,\n    'megaliter': 1000,\n    'hectare meter': 10000,\n    'acre foot': 0.028316847 * 43560,\n    'acre foot [US survey]': 1233.489,\n    'acre inch': 0.028316847 * 3630,\n    'barrel [UK, wine]': 0.00454609 * 31.5,\n    'barrel [UK]': 0.00454609 * 36,\n    'barrel [US, dry]': (0.003785411784 / 231) * 7056,\n    'barrel [US, federal]': 0.003785411784 * 31,\n    'barrel [US, liquid]': 0.003785411784 * 31.5,\n    'barrel [US, petroleum]': 0.003785411784 * 42,\n    'board foot': ((0.003785411784 / 231) * 1728) / 12,\n    'bucket [UK]': 0.00454609 * 4,\n    'bucket [US]': 0.003785411784 * 5,\n    'bushel [UK]': 0.00454609 * 8,\n    'bushel [US, dry]': 0.0044048838 * 8,\n    'Robie': 0.00001,\n    'cord [firewood]': 0.028316847 * 128,\n    'cord foot [timber]': 0.028316847 * 16,\n    'milliliter': 0.000001,\n    'cubic cubit [ancient egypt]': 0.144,\n    'liter': 0.001,\n    'cubic foot': (0.003785411784 / 231) * 1728,\n    'cubic inch': 0.003785411784 / 231,\n    'cubic kilometer': 1.0e+9,\n    'cubic mile': (((0.003785411784 / 231) * 1728) * 43560) * 3379200,\n    'cubic micrometer': 1.0e-18,\n    'microliter': 1.0e-9,\n    'yard': ((0.003785411784 / 231) * 1728) * 27,\n    'cup [Canada]': 0.00454609 * 0.05,\n    'cup [metric]': 0.00025,\n    'cup [US]': 0.003785411784 / 16,\n    'deciliter': 0.0001,\n    'dekaliter': 0.01,\n    'dram': (0.003785411784 / 128) / 8,\n    'drum [US, petroleum]': 0.003785411784 * 55,\n    'drum [metric, petroleum]': 0.001 * 200,\n    'fifth': 0.003785411784 / 5,\n    'imperial gallon': 0.00454609,\n    'gallon [US, dry]': 0.0044048838,\n    'gallon [US, liquid]': 0.003785411784,\n    'gill [UK]': 0.00454609 / 32,\n    'gill [US]': 0.003785411784 / 32,\n    'hectoliter': 0.1,\n    'hogshead [UK]': 0.00454609 * 63,\n    'hogshead [US]': 0.003785411784 * 63,\n    'jigger': (0.003785411784 / 128) * 1.5,\n    'measure [ancient hebrew]': 0.0077,\n    'minim [UK]': (0.00454609 / 160) / 480,\n    'minim [US]': (0.003785411784 / 128) / 480,\n    'ounce [UK, liquid]': 0.00454609 / 160,\n    'shot': 0.003785411784 / 128,\n    'peck [UK]': 0.00454609 * 2,\n    'peck [US]': 0.0044048838 * 2,\n    'pint [UK]': 0.00454609 / 8,\n    'pint [US, dry]': 0.0044048838 / 8,\n    'pint [US, liquid]': 0.003785411784 / 8,\n    'pipe [UK]': 0.00454609 * 108,\n    'pipe [US]': 0.003785411784 * 126,\n    'quart [Germany]': 0.00114504,\n    'quart [ancient hebrew]': 0.00108,\n    'quart [UK]': 0.00454609 / 4,\n    'quart [US, dry]': 0.0044048838 / 4,\n    'quart [US, liquid]': 0.003785411784 / 4,\n    'quarter [UK, liquid]': 0.00454609 * 64,\n    'Tablespoon [metric]': 0.000015,\n    'Tablespoon [UK]': (0.00454609 / 160) / 2,\n    'Tablespoon [US]': (0.003785411784 / 128) / 2,\n    'Teaspoon [metric]': 0.000005,\n    'Teaspoon [UK]': (0.00454609 / 160) / 8,\n    'Teaspoon [US]': (0.003785411784 / 128) / 6\n  }\n};\n","const Converter = require('./src/converter');\nconst Units = require('./src/units');\n\n// register all known unit types\nUnits.register(require('./definitions/acceleration'));\nUnits.register(require('./definitions/angle'));\nUnits.register(require('./definitions/area'));\nUnits.register(require('./definitions/binary'));\nUnits.register(require('./definitions/density'));\nUnits.register(require('./definitions/distance'));\nUnits.register(require('./definitions/electric.capacitance'));\nUnits.register(require('./definitions/electric.current'));\nUnits.register(require('./definitions/energy'));\nUnits.register(require('./definitions/flow.rate.mole'));\nUnits.register(require('./definitions/flow.rate.volume'));\nUnits.register(require('./definitions/force'));\nUnits.register(require('./definitions/frequency'));\nUnits.register(require('./definitions/illuminance'));\nUnits.register(require('./definitions/luminance'));\nUnits.register(require('./definitions/mass'));\nUnits.register(require('./definitions/power'));\nUnits.register(require('./definitions/pressure'));\nUnits.register(require('./definitions/temperature'));\nUnits.register(require('./definitions/time'));\nUnits.register(require('./definitions/torque'));\nUnits.register(require('./definitions/velocity'));\nUnits.register(require('./definitions/viscosity.dynamic'));\nUnits.register(require('./definitions/viscosity.dynamic.oil-water'));\nUnits.register(require('./definitions/viscosity.kinematic'));\nUnits.register(require('./definitions/volume'));\n\nmodule.exports = Converter\nmodule.exports.Converter = Converter;\nmodule.exports.Units = Units;\n","'use strict';\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","'use strict';\n\nconst assert = require('assert');\nconst Units = require('./units');\nconst measureParser = require('./util/measure-parser');\n\nmodule.exports = {\n  convert(typeName) {\n    const typeDef = Units.get(typeName);\n\n    return {\n      from(fromValue, fromUnit) {\n        const param = measureParser(fromValue, fromUnit);\n\n        return {\n          to(toUnit) {\n            return typeDef.calc(param.value, param.unit, toUnit);\n          }\n        }\n      },\n      using(converter) {\n        assert(typeDef.hasConverter(converter), 'Unknown conversion function \"' + converter + '\" found for type definition \"' + typeName + '\"');\n\n        const params = {};\n\n        return {\n          with(name, value, unit) {\n            if (typeof name === 'string') {\n              const param = measureParser(value, unit);\n              const paramTypeName = typeDef.conversion.params[name];\n              const paramTypeDef = Units.get(paramTypeName);\n\n              params[name] = paramTypeDef.calcBase(param.value, param.unit);\n            } else if (arguments.length === 1) {\n              assert(name && (typeof name === 'object'), 'Invalid argument \"' + name + '\"');\n\n              const keys = Object.keys(name);\n\n              for (const key of keys) {\n                const value = name[key];\n\n                if (Array.isArray(value)) {\n                  this.with(key, value[0], value[1]);   // we only care for the first two args\n                } else {\n                  this.with(key, value);\n                }\n              }\n            } else {\n              assert.fail('Invalid arguments given');\n            }\n\n            return this;\n          },\n          to(toUnit) {\n            return typeDef.calc(typeDef.convert(converter, params), typeDef.base, toUnit);\n          }\n        }\n      },\n      isCompatible(toType) {\n        return typeDef.canConvert(toType);\n      }\n    };\n  }\n};\n","'use strict';\n\nconst assert = require('assert');\n\n\n/**\nUnit definition cache.\n@private\n*/\nconst unitCache = {};\n\n/**\nRegister and retrive registered unit definitions\n*/\nconst Units = {\n\n  /**\n  Register a new type definition.\n\n  The type should be a string, and it's value should be the one\n  referenced by other type's conversion rules.\n  The data should be an array with these properties :\n\n    - name {string}        the humain-readable name of this unit type\n    - base {string}        the base unit for this unit type\n    - units {object}       a map of unit names and their associated values, where\n                           the base unit should have a value of 1\n    - aliases {object}     (optional) a map representing unit names aliases (ex: 'km': 'kilometer')\n    - converters {array}   (optional) an array of conversion rules\n\n  See : UnitDefinition for more information.\n\n  @param data {object}\n  */\n  register(def) {\n    const typeDef = new UnitDefinition(def);\n\n    unitCache[typeDef.name] = typeDef;\n  },\n\n  /**\n  Unregister a unit type\n  @param type {string}\n  */\n  unregister(typeName) {\n    assert(typeof typeName === 'string' && typeName.length, 'Invalid type');\n\n    delete unitCache[typeName];\n  },\n\n\n  /**\n  Return an array of all available units. If type is specified, then\n  return all units of the same type.\n  @param type {string} (optional)\n  @return {Array}\n  */\n  available(typeName) {\n    if (typeName) {\n      const typeDef = this.get(typeName);\n      const units = Object.keys(typeDef.aliases);\n\n      units.push.apply(units, Object.keys(typeDef.units));\n\n      return units.sort();\n    } else {\n      return this.types.reduce((units, typeName) => {\n        const typeDef = this.get(typeName);\n        units.push.apply(units, Object.keys(typeDef.aliases).concat(Object.keys(typeDef.units)));\n        return units;\n      }, []).sort();\n    }\n  },\n\n  /**\n  Return all available types\n  @return {Array}\n  */\n  get types() {\n    return Object.keys(unitCache).sort();\n  },\n\n  /**\n  Return the unit type\n  @param typeName {String}\n  @return {object}\n  */\n  get(typeName) {\n    if (!(typeName in unitCache)) {\n      throw new TypeError('Invalid unit type name : ' + typeName);\n    }\n    return unitCache[typeName];\n  },\n\n  /**\n  Return the first type definition name found for the given unit\n  @param unit {string}\n  @return {string}\n  */\n  getUnitTypeName(unit) {\n    return Object.keys(unitCache).find(typeName => {\n      const typeDef = unitCache[typeName];\n\n      return (unit in typeDef.units || unit in typeDef.aliases);\n    });\n  }\n\n};\n\n\n/**\nWrap unit definitions with helper methods and validations.\n@private\n*/\nclass UnitDefinition {\n  constructor(data) {\n    assert(typeof data.name === 'string' && data.name, 'Definition has no name');\n    assert(typeof data.base === 'string' && data.base, 'Definition has no base unit : ' + data.name);\n    assert(data.units && Object.keys(data.units).length, 'Definition has no units : ' + data.name);\n\n    this.name = data.name;\n    this.base = data.base;\n    this.units = data.units;\n    this.aliases = data.aliases || {};\n    this.conversion = data.conversion || {};\n\n    assert(this.base in this.units, 'Invalid base \"' + this.base + '\" in definition : ' + this.name);\n\n    Object.keys(this.aliases).forEach(alias => {\n      assert(typeof this.aliases[alias] === 'string', 'Invalid alias value for \"' + alias + '\" in definition : ' + this.name);\n      assert(this.aliases[alias] in this.units, 'Invalid alias \"' + alias + '\" = \"' + this.aliases[alias] + '\" in definition : ' + this.name);\n    });\n\n    if (this.conversion.converters) {\n      Object.keys(this.conversion.converters).forEach(converterName => {\n        const converterFn = this.conversion.converters[converterName];\n\n        assert(typeof converterFn === 'function', 'Converter should be a function : ' + converterName);\n      });\n    }\n  }\n\n  /**\n  Resolve the specified unit name. This method does not check whether the\n  specified value is actually a valid unit name.\n  @param unit {string}\n  @return {string}\n  */\n  resolveUnit(unit) {\n    return this.aliases && this.aliases[unit] || unit;\n  }\n\n  /**\n  Calculate the value from a given unit to another unit.\n  For example: unitDef.calc(1, 'kilometer', 'meter') => 1000\n  @param value {number}\n  @param fromUnit {string}\n  @param toUnit {string}\n  @return {number}\n  */\n  calc(value, fromUnit, toUnit) {\n    fromUnit = this.resolveUnit(fromUnit);\n    toUnit = this.resolveUnit(toUnit);\n\n    assert(fromUnit in this.units, 'Invalid unit \"' + fromUnit + '\" in definition : ' + this.name);\n    assert(toUnit in this.units, 'Invalid unit \"' + toUnit + '\" in definition : ' + this.name);\n\n    if (fromUnit !== toUnit) {\n      if (typeof this.units[fromUnit].toBase === 'function' && fromUnit !== this.base) {\n        value = this.units[fromUnit].toBase(Number(value));\n      } else {\n        value *= this.units[fromUnit];\n      }\n      if (typeof this.units[toUnit].fromBase === 'function' && toUnit !== this.base) {\n        value = this.units[toUnit].fromBase(Number(value));\n      } else {\n        value /= this.units[toUnit];\n      }\n    }\n\n    return value;\n  }\n\n  /**\n  Calculate the value from a given unit to this definition's vase unit.\n  @param value {number}\n  @param unit {string}\n  @return {number}\n  */\n  calcBase(value, unit) {\n    return this.calc(value, unit, this.base);\n  }\n\n  /**\n  Check if any converter can convert the given type to the current type.\n  @param type {string}\n  @return {boolean}\n  */\n  canConvert(type) {\n    return !!(this.conversion.params && Object.keys(this.conversion.params).some(param => this.conversion.params[param] === type));\n  }\n\n  /**\n  Check that this unit type contains the specified converter.\n  @param converter {string}\n  @return {boolean}\n  */\n  hasConverter(converter) {\n    return this.conversion && this.conversion.converters && typeof this.conversion.converters[converter] === 'function';\n  }\n\n  /**\n  Call a converter given the specified converter name and params. If no converter match is\n  found, an error will be thrown. If not all params as specified for the given converter,\n  a value such as NaN may be returned.\n  @param converter {string}      the name of the converter to use\n  @param params {object}         an object of arguments.\n  */\n  convert(converter, params) {\n    assert(this.hasConverter(converter), 'Unknown or invalid converter \"' + converter + '\" in definition : ' + this.name);\n\n    const fn = this.conversion.converters[converter]\n\n    return fn.call(this, params || {});\n  }\n}\n\n\n/**\nExpose a singleton instance of Units, a class to register and retrieve unit definitions\n*/\nmodule.exports = Units;\n","\nconst UNIT_VALUE_REGEXP = /(-?\\d+(?:\\.\\d+)?)\\s(.+)$/;\n\nconst assert = require('assert');\n\n/**\nIf value is a string, parse the value and unit.\nThe returned values are then validated, where value\nmust be numeric and unit must be a non-empty string.\n\nUsage :\n   parseMeasure(2, 'unit');\n   parseMeasure('2', 'unit');\n   parseMeasure('2 unit');\n   parseMeasure('2 unit', null);\n   parseMeasure('2 unit', false);\n\nReturns an object as { value, unit }\n\n@param value {Number|String}\n@param unit {String}\n@return {Object}\n*/\nmodule.exports = function parseMeasure(value, unit) {\n  if (typeof unit !== 'string' && typeof value === 'string') {\n    const match = (value + '').match(UNIT_VALUE_REGEXP);\n    if (match) {\n      value = match[1];\n      unit = match[2];\n    }\n  }\n\n  assert(!(isNaN(value) || isNaN(parseFloat(value))), 'Value must be a number : \"' + value + '\"');\n  assert(unit && typeof unit === 'string', 'Empty or invalid unit : \"' + unit + '\"');\n\n  return { value: value, unit: unit };\n}\n"]}